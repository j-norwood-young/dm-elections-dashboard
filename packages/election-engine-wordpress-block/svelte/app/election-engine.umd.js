(function(T){typeof define=="function"&&define.amd?define(T):T()})(function(){"use strict";var fi=Object.defineProperty;var oi=(T,Q,$)=>Q in T?fi(T,Q,{enumerable:!0,configurable:!0,writable:!0,value:$}):T[Q]=$;var Ye=(T,Q,$)=>(oi(T,typeof Q!="symbol"?Q+"":Q,$),$);function T(){}function Q(i){return i()}function $(){return Object.create(null)}function fe(i){i.forEach(Q)}function Ke(i){return typeof i=="function"}function Ne(i,e){return i!=i?e==e:i!==e||i&&typeof i=="object"||typeof i=="function"}function Bt(i){return Object.keys(i).length===0}function b(i,e){i.appendChild(e)}function q(i,e,t){i.insertBefore(e,t||null)}function A(i){i.parentNode&&i.parentNode.removeChild(i)}function be(i,e){for(let t=0;t<i.length;t+=1)i[t]&&i[t].d(e)}function O(i){return document.createElement(i)}function V(i){return document.createElementNS("http://www.w3.org/2000/svg",i)}function x(i){return document.createTextNode(i)}function le(){return x(" ")}function Fe(){return x("")}function oe(i,e,t,l){return i.addEventListener(e,t,l),()=>i.removeEventListener(e,t,l)}function f(i,e,t){t==null?i.removeAttribute(e):i.getAttribute(e)!==t&&i.setAttribute(e,t)}function Ct(i){return Array.from(i.childNodes)}function K(i,e){e=""+e,i.data!==e&&(i.data=e)}function Z(i,e,t){i.classList.toggle(e,!!t)}let we;function ke(i){we=i}function Mt(){if(!we)throw new Error("Function called outside component initialization");return we}function Vt(i){Mt().$$.on_mount.push(i)}const ce=[],Xe=[];let he=[];const $e=[],St=Promise.resolve();let He=!1;function At(){He||(He=!0,St.then(et))}function je(i){he.push(i)}const Le=new Set;let ue=0;function et(){if(ue!==0)return;const i=we;do{try{for(;ue<ce.length;){const e=ce[ue];ue++,ke(e),qt(e.$$)}}catch(e){throw ce.length=0,ue=0,e}for(ke(null),ce.length=0,ue=0;Xe.length;)Xe.pop()();for(let e=0;e<he.length;e+=1){const t=he[e];Le.has(t)||(Le.add(t),t())}he.length=0}while(ce.length);for(;$e.length;)$e.pop()();He=!1,Le.clear(),ke(i)}function qt(i){if(i.fragment!==null){i.update(),fe(i.before_update);const e=i.dirty;i.dirty=[-1],i.fragment&&i.fragment.p(i.ctx,e),i.after_update.forEach(je)}}function Pt(i){const e=[],t=[];he.forEach(l=>i.indexOf(l)===-1?e.push(l):t.push(l)),t.forEach(l=>l()),he=e}const Me=new Set;let re;function tt(){re={r:0,c:[],p:re}}function it(){re.r||fe(re.c),re=re.p}function X(i,e){i&&i.i&&(Me.delete(i),i.i(e))}function de(i,e,t,l){if(i&&i.o){if(Me.has(i))return;Me.add(i),re.c.push(()=>{Me.delete(i),l&&(t&&i.d(1),l())}),i.o(e)}else l&&l()}function G(i){return(i==null?void 0:i.length)!==void 0?i:Array.from(i)}function lt(i){i&&i.c()}function We(i,e,t){const{fragment:l,after_update:r}=i.$$;l&&l.m(e,t),je(()=>{const n=i.$$.on_mount.map(Q).filter(Ke);i.$$.on_destroy?i.$$.on_destroy.push(...n):fe(n),i.$$.on_mount=[]}),r.forEach(je)}function ze(i,e){const t=i.$$;t.fragment!==null&&(Pt(t.after_update),fe(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function Tt(i,e){i.$$.dirty[0]===-1&&(ce.push(i),At(),i.$$.dirty.fill(0)),i.$$.dirty[e/31|0]|=1<<e%31}function Je(i,e,t,l,r,n,o=null,s=[-1]){const a=we;ke(i);const c=i.$$={fragment:null,ctx:[],props:n,update:T,not_equal:r,bound:$(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(a?a.$$.context:[])),callbacks:$(),dirty:s,skip_bound:!1,root:e.target||a.$$.root};o&&o(c.root);let h=!1;if(c.ctx=t?t(i,e.props||{},(u,d,..._)=>{const y=_.length?_[0]:d;return c.ctx&&r(c.ctx[u],c.ctx[u]=y)&&(!c.skip_bound&&c.bound[u]&&c.bound[u](y),h&&Tt(i,u)),d}):[],c.update(),h=!0,fe(c.before_update),c.fragment=l?l(c.ctx):!1,e.target){if(e.hydrate){const u=Ct(e.target);c.fragment&&c.fragment.l(u),u.forEach(A)}else c.fragment&&c.fragment.c();e.intro&&X(i.$$.fragment),We(i,e.target,e.anchor),et()}ke(a)}class Ie{constructor(){Ye(this,"$$");Ye(this,"$$set")}$destroy(){ze(this,1),this.$destroy=T}$on(e,t){if(!Ke(t))return T;const l=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return l.push(t),()=>{const r=l.indexOf(t);r!==-1&&l.splice(r,1)}}$set(e){this.$$set&&!Bt(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const xt="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(xt);var rt={},Ve={};Object.defineProperty(Ve,"__esModule",{value:!0});var Rt=function(){function i(){this.root=null}return i.prototype.insertSuccessor=function(e,t){var l;if(e){if(t.prev=e,t.next=e.next,e.next&&(e.next.prev=t),e.next=t,e.right){for(e=e.right;e.left;)e=e.left;e.left=t}else e.right=t;l=e}else this.root?(e=this.first(this.root),t.prev=null,t.next=e,e.prev=t,e.left=t,l=e):(t.prev=t.next=null,this.root=t,l=null);t.left=t.right=null,t.parent=l,t.red=!0;var r,n;for(e=t;l&&l.red;)r=l.parent,l===r.left?(n=r.right,n&&n.red?(l.red=n.red=!1,r.red=!0,e=r):(e===l.right&&(this.rotateLeft(l),e=l,l=e.parent),l.red=!1,r.red=!0,this.rotateRight(r))):(n=r.left,n&&n.red?(l.red=n.red=!1,r.red=!0,e=r):(e===l.left&&(this.rotateRight(l),e=l,l=e.parent),l.red=!1,r.red=!0,this.rotateLeft(r))),l=e.parent;this.root.red=!1},i.prototype.removeNode=function(e){e.next&&(e.next.prev=e.prev),e.prev&&(e.prev.next=e.next),e.next=e.prev=null;var t=e.parent,l=e.left,r=e.right,n=null;l?r?n=this.first(r):n=l:n=r,t?t.left===e?t.left=n:t.right=n:this.root=n;var o;if(l&&r?(o=n.red,n.red=e.red,n.left=l,l.parent=n,n!==r?(t=n.parent,n.parent=e.parent,e=n.right,t.left=e,n.right=r,r.parent=n):(n.parent=t,t=n,e=n.right)):(o=e.red,e=n),e&&(e.parent=t),!o){if(e&&e.red){e.red=!1;return}var s;do{if(e===this.root)break;if(e===t.left){if(s=t.right,s.red&&(s.red=!1,t.red=!0,this.rotateLeft(t),s=t.right),s.left&&s.left.red||s.right&&s.right.red){(!s.right||!s.right.red)&&(s.left.red=!1,s.red=!0,this.rotateRight(s),s=t.right),s.red=t.red,t.red=s.right.red=!1,this.rotateLeft(t),e=this.root;break}}else if(s=t.left,s.red&&(s.red=!1,t.red=!0,this.rotateRight(t),s=t.left),s.left&&s.left.red||s.right&&s.right.red){(!s.left||!s.left.red)&&(s.right.red=!1,s.red=!0,this.rotateLeft(s),s=t.left),s.red=t.red,t.red=s.left.red=!1,this.rotateRight(t),e=this.root;break}s.red=!0,e=t,t=t.parent}while(!e.red);e&&(e.red=!1)}},i.prototype.rotateLeft=function(e){var t=e,l=e.right,r=t.parent;r?r.left===t?r.left=l:r.right=l:this.root=l,l.parent=r,t.parent=l,t.right=l.left,t.right&&(t.right.parent=t),l.left=t},i.prototype.rotateRight=function(e){var t=e,l=e.left,r=t.parent;r?r.left===t?r.left=l:r.right=l:this.root=l,l.parent=r,t.parent=l,t.left=l.right,t.left&&(t.left.parent=t),l.right=t},i.prototype.first=function(e){for(;e.left;)e=e.left;return e},i.prototype.last=function(e){for(;e.right;)e=e.right;return e},i}();Ve.RBTree=Rt;var Nt=function(){function i(){}return i}();Ve.RBTreeNode=Nt;var Oe={};Object.defineProperty(Oe,"__esModule",{value:!0});var Ft=function(){function i(e,t){this.x=e,this.y=t}return i}();Oe.Vertex=Ft;var De={};Object.defineProperty(De,"__esModule",{value:!0});var Ht=function(){function i(e,t){this.lSite=e,this.rSite=t,this.va=this.vb=null}return i}();De.Edge=Ht;var Qe={};Object.defineProperty(Qe,"__esModule",{value:!0});var jt=function(){function i(e){this.site=e,this.halfedges=[],this.closeMe=!1}return i.prototype.init=function(e){return this.site=e,this.halfedges=[],this.closeMe=!1,this},i.prototype.prepareHalfedges=function(){for(var e=this.halfedges,t=e.length,l;t--;)l=e[t].edge,(!l.vb||!l.va)&&e.splice(t,1);return e.sort(function(r,n){return n.angle-r.angle}),e.length},i.prototype.getNeighborIds=function(){for(var e=[],t=this.halfedges.length,l;t--;)l=this.halfedges[t].edge,l.lSite!==null&&l.lSite.id!=this.site.id?e.push(l.lSite.id):l.rSite!==null&&l.rSite.id!=this.site.id&&e.push(l.rSite.id);return e},i.prototype.getBbox=function(){for(var e=this.halfedges,t=e.length,l=1/0,r=1/0,n=-1/0,o=-1/0,s,a,c;t--;)s=e[t].getStartpoint(),a=s.x,c=s.y,a<l&&(l=a),c<r&&(r=c),a>n&&(n=a),c>o&&(o=c);return{x:l,y:r,width:n-l,height:o-r}},i.prototype.pointIntersection=function(e,t){for(var l=this.halfedges,r=l.length,n,o,s,a;r--;){if(n=l[r],o=n.getStartpoint(),s=n.getEndpoint(),a=(t-o.y)*(s.x-o.x)-(e-o.x)*(s.y-o.y),!a)return 0;if(a>0)return-1}return 1},i}();Qe.Cell=jt;var Ze={};Object.defineProperty(Ze,"__esModule",{value:!0});var Lt=function(){function i(e){this.site=e}return i}();Ze.Diagram=Lt;var Ge={};Object.defineProperty(Ge,"__esModule",{value:!0});var Wt=function(){function i(e,t,l){if(this.site=t,this.edge=e,l)this.angle=Math.atan2(l.y-t.y,l.x-t.x);else{var r=e.va,n=e.vb;this.angle=e.lSite===t?Math.atan2(n.x-r.x,r.y-n.y):Math.atan2(r.x-n.x,n.y-r.y)}}return i.prototype.getStartpoint=function(){return this.edge.lSite===this.site?this.edge.va:this.edge.vb},i.prototype.getEndpoint=function(){return this.edge.lSite===this.site?this.edge.vb:this.edge.va},i}();Ge.Halfedge=Wt,Object.defineProperty(rt,"__esModule",{value:!0});var Se=Ve,zt=Oe,nt=De,Jt=Qe,st=Ze,It=Ge,Ot=function(){function i(){this.vertices=null,this.edges=null,this.cells=null,this.toRecycle=null,this.beachsectionJunkyard=[],this.circleEventJunkyard=[],this.vertexJunkyard=[],this.edgeJunkyard=[],this.cellJunkyard=[]}return i.prototype.compute=function(e,t){var l=new Date;this.reset(),this.toRecycle&&(this.vertexJunkyard=this.vertexJunkyard.concat(this.toRecycle.vertices),this.edgeJunkyard=this.edgeJunkyard.concat(this.toRecycle.edges),this.cellJunkyard=this.cellJunkyard.concat(this.toRecycle.cells),this.toRecycle=null);var r=e.slice(0);r.sort(function(_,y){var p=y.y-_.y;return p||y.x-_.x});for(var n=r.pop(),o=0,s,a,c=this.cells,h;;)if(h=this.firstCircleEvent,n&&(!h||n.y<h.y||n.y===h.y&&n.x<h.x))(n.x!==s||n.y!==a)&&(c[o]=this.createCell(n),n.id=o++,this.addBeachsection(n),a=n.y,s=n.x),n=r.pop();else if(h)this.removeBeachsection(h.arc);else break;this.clipEdges(t),this.closeCells(t);var u=new Date,d=new st.Diagram;return d.cells=this.cells,d.edges=this.edges,d.vertices=this.vertices,d.execTime=u.getTime()-l.getTime(),this.reset(),d},i.prototype.sqrt=function(e){return Math.sqrt(e)},i.prototype.abs=function(e){return Math.abs(e)},i.prototype.eps=function(){return 1e-9},i.prototype.inveps=function(){return 1/this.eps()},i.prototype.equalWithEpsilon=function(e,t){return this.abs(e-t)<this.eps()},i.prototype.greaterThanWithEpsilon=function(e,t){return e-t>this.eps()},i.prototype.greaterThanOrEqualWithEpsilon=function(e,t){return t-e<this.eps()},i.prototype.lessThanWithEpsilon=function(e,t){return t-e>this.eps()},i.prototype.lessThanOrEqualWithEpsilon=function(e,t){return e-t<this.eps()},i.prototype.quantizeSites=function(e){for(var t=this.eps(),l=e.length,r;l--;)r=e[l],r.x=Math.floor(r.x/t)*t,r.y=Math.floor(r.y/t)*t},i.prototype.recycle=function(e){if(e)if(e instanceof st.Diagram)this.toRecycle=e;else throw"Voronoi.recycleDiagram() > Need a Diagram object."},i.prototype.reset=function(){if(this.beachline||(this.beachline=new Se.RBTree),this.beachline.root)for(var e=this.beachline.first(this.beachline.root);e;)this.beachsectionJunkyard.push(e),e=e.next;this.beachline.root=null,this.circleEvents||(this.circleEvents=new Se.RBTree),this.circleEvents.root=this.firstCircleEvent=null,this.vertices=[],this.edges=[],this.cells=[]},i.prototype.createCell=function(e){var t=this.cellJunkyard.pop();return t?(t.init(e),t.init(e)):new Jt.Cell(e)},i.prototype.createHalfedge=function(e,t,l){return new It.Halfedge(e,t,l)},i.prototype.createVertex=function(e,t){var l=this.vertexJunkyard.pop();return l?(l.x=e,l.y=t):l=new zt.Vertex(e,t),this.vertices.push(l),l},i.prototype.createEdge=function(e,t,l,r){l===void 0&&(l=null),r===void 0&&(r=null);var n=this.edgeJunkyard.pop();return n?(n.lSite=e,n.rSite=t,n.va=n.vb=null):n=new nt.Edge(e,t),this.edges.push(n),l&&this.setEdgeStartpoint(n,e,t,l),r&&this.setEdgeEndpoint(n,e,t,r),this.cells[e.id].halfedges.push(this.createHalfedge(n,e,t)),this.cells[t.id].halfedges.push(this.createHalfedge(n,t,e)),n},i.prototype.createBorderEdge=function(e,t,l){var r=this.edgeJunkyard.pop();return r?(r.lSite=e,r.rSite=null):r=new nt.Edge(e,null),r.va=t,r.vb=l,this.edges.push(r),r},i.prototype.setEdgeStartpoint=function(e,t,l,r){!e.va&&!e.vb?(e.va=r,e.lSite=t,e.rSite=l):e.lSite===l?e.vb=r:e.va=r},i.prototype.setEdgeEndpoint=function(e,t,l,r){this.setEdgeStartpoint(e,l,t,r)},i.prototype.createBeachsection=function(e){var t=this.beachsectionJunkyard.pop();return t||(t=new Se.RBTreeNode),t.site=e,t},i.prototype.leftBreakPoint=function(e,t){var l=e.site,r=l.x,n=l.y,o=n-t;if(!o)return r;var s=e.prev;if(!s)return-1/0;l=s.site;var a=l.x,c=l.y,h=c-t;if(!h)return a;var u=a-r,d=1/o-1/h,_=u/h;return d?(-_+this.sqrt(_*_-2*d*(u*u/(-2*h)-c+h/2+n-o/2)))/d+r:(r+a)/2},i.prototype.rightBreakPoint=function(e,t){var l=e.next;if(l)return this.leftBreakPoint(l,t);var r=e.site;return r.y===t?r.x:1/0},i.prototype.detachBeachsection=function(e){this.detachCircleEvent(e),this.beachline.removeNode(e),this.beachsectionJunkyard.push(e)},i.prototype.removeBeachsection=function(e){var t=e.circleEvent,l=t.x,r=t.ycenter,n=this.createVertex(l,r),o=e.prev,s=e.next,a=[e],c=Math.abs;this.detachBeachsection(e);for(var h=o;h.circleEvent&&c(l-h.circleEvent.x)<this.eps()&&c(r-h.circleEvent.ycenter)<this.eps();)o=h.prev,a.unshift(h),this.detachBeachsection(h),h=o;a.unshift(h),this.detachCircleEvent(h);for(var u=s;u.circleEvent&&c(l-u.circleEvent.x)<this.eps()&&c(r-u.circleEvent.ycenter)<this.eps();)s=u.next,a.push(u),this.detachBeachsection(u),u=s;a.push(u),this.detachCircleEvent(u);var d=a.length,_;for(_=1;_<d;_++)u=a[_],h=a[_-1],this.setEdgeStartpoint(u.edge,h.site,u.site,n);h=a[0],u=a[d-1],u.edge=this.createEdge(h.site,u.site,void 0,n),this.attachCircleEvent(h),this.attachCircleEvent(u)},i.prototype.addBeachsection=function(e){for(var t=e.x,l=e.y,r,n,o,s,a=this.beachline.root;a;)if(o=this.leftBreakPoint(a,l)-t,o>this.eps())a=a.left;else if(s=t-this.rightBreakPoint(a,l),s>this.eps()){if(!a.right){r=a;break}a=a.right}else{o>-this.eps()?(r=a.prev,n=a):s>-this.eps()?(r=a,n=a.next):r=n=a;break}var c=this.createBeachsection(e);if(this.beachline.insertSuccessor(r,c),!(!r&&!n)){if(r===n){this.detachCircleEvent(r),n=this.createBeachsection(r.site),this.beachline.insertSuccessor(c,n),c.edge=n.edge=this.createEdge(r.site,c.site),this.attachCircleEvent(r),this.attachCircleEvent(n);return}if(r&&!n){c.edge=this.createEdge(r.site,c.site);return}if(r!==n){this.detachCircleEvent(r),this.detachCircleEvent(n);var h=r.site,u=h.x,d=h.y,_=e.x-u,y=e.y-d,p=n.site,v=p.x-u,B=p.y-d,M=2*(_*B-y*v),C=_*_+y*y,P=v*v+B*B,S=this.createVertex((B*C-y*P)/M+u,(_*P-v*C)/M+d);this.setEdgeStartpoint(n.edge,h,p,S),c.edge=this.createEdge(h,e,void 0,S),n.edge=this.createEdge(e,p,void 0,S),this.attachCircleEvent(r),this.attachCircleEvent(n);return}}},i.prototype.attachCircleEvent=function(e){var t=e.prev,l=e.next;if(!(!t||!l)){var r=t.site,n=e.site,o=l.site;if(r!==o){var s=n.x,a=n.y,c=r.x-s,h=r.y-a,u=o.x-s,d=o.y-a,_=2*(c*d-h*u);if(!(_>=-2e-12)){var y=c*c+h*h,p=u*u+d*d,v=(d*y-h*p)/_,B=(c*p-u*y)/_,M=B+a,C=this.circleEventJunkyard.pop();C||(C=new Se.RBTreeNode),C.arc=e,C.site=n,C.x=v+s,C.y=M+this.sqrt(v*v+B*B),C.ycenter=M,e.circleEvent=C;for(var P=null,S=this.circleEvents.root;S;)if(C.y<S.y||C.y===S.y&&C.x<=S.x)if(S.left)S=S.left;else{P=S.prev;break}else if(S.right)S=S.right;else{P=S;break}this.circleEvents.insertSuccessor(P,C),P||(this.firstCircleEvent=C)}}}},i.prototype.detachCircleEvent=function(e){var t=e.circleEvent;t&&(t.prev||(this.firstCircleEvent=t.next),this.circleEvents.removeNode(t),this.circleEventJunkyard.push(t),e.circleEvent=null)},i.prototype.connectEdge=function(e,t){var l=e.vb;if(l)return!0;var r=e.va,n=t.xl,o=t.xr,s=t.yt,a=t.yb,c=e.lSite,h=e.rSite,u=c.x,d=c.y,_=h.x,y=h.y,p=(u+_)/2,v=(d+y)/2,B,M;if(this.cells[c.id].closeMe=!0,this.cells[h.id].closeMe=!0,y!==d&&(B=(u-_)/(y-d),M=v-B*p),B===void 0){if(p<n||p>=o)return!1;if(u>_){if(!r||r.y<s)r=this.createVertex(p,s);else if(r.y>=a)return!1;l=this.createVertex(p,a)}else{if(!r||r.y>a)r=this.createVertex(p,a);else if(r.y<s)return!1;l=this.createVertex(p,s)}}else if(B<-1||B>1)if(u>_){if(!r||r.y<s)r=this.createVertex((s-M)/B,s);else if(r.y>=a)return!1;l=this.createVertex((a-M)/B,a)}else{if(!r||r.y>a)r=this.createVertex((a-M)/B,a);else if(r.y<s)return!1;l=this.createVertex((s-M)/B,s)}else if(d<y){if(!r||r.x<n)r=this.createVertex(n,B*n+M);else if(r.x>=o)return!1;l=this.createVertex(o,B*o+M)}else{if(!r||r.x>o)r=this.createVertex(o,B*o+M);else if(r.x<n)return!1;l=this.createVertex(n,B*n+M)}return e.va=r,e.vb=l,!0},i.prototype.clipEdge=function(e,t){var l=e.va.x,r=e.va.y,n=e.vb.x,o=e.vb.y,s=0,a=1,c=n-l,h=o-r,u=l-t.xl;if(c===0&&u<0)return!1;var d=-u/c;if(c<0){if(d<s)return!1;d<a&&(a=d)}else if(c>0){if(d>a)return!1;d>s&&(s=d)}if(u=t.xr-l,c===0&&u<0)return!1;if(d=u/c,c<0){if(d>a)return!1;d>s&&(s=d)}else if(c>0){if(d<s)return!1;d<a&&(a=d)}if(u=r-t.yt,h===0&&u<0)return!1;if(d=-u/h,h<0){if(d<s)return!1;d<a&&(a=d)}else if(h>0){if(d>a)return!1;d>s&&(s=d)}if(u=t.yb-r,h===0&&u<0)return!1;if(d=u/h,h<0){if(d>a)return!1;d>s&&(s=d)}else if(h>0){if(d<s)return!1;d<a&&(a=d)}return s>0&&(e.va=this.createVertex(l+s*c,r+s*h)),a<1&&(e.vb=this.createVertex(l+a*c,r+a*h)),(s>0||a<1)&&(this.cells[e.lSite.id].closeMe=!0,this.cells[e.rSite.id].closeMe=!0),!0},i.prototype.clipEdges=function(e){for(var t=this.edges,l=t.length,r,n=Math.abs;l--;)r=t[l],(!this.connectEdge(r,e)||!this.clipEdge(r,e)||n(r.va.x-r.vb.x)<this.eps()&&n(r.va.y-r.vb.y)<this.eps())&&(r.va=r.vb=null,t.splice(l,1))},i.prototype.closeCells=function(e){for(var t=e.xl,l=e.xr,r=e.yt,n=e.yb,o=this.cells,s=o.length,a,c,h,u,d,_,y,p,v,B=Math.abs;s--;)if(a=o[s],!!a.prepareHalfedges()&&a.closeMe){for(h=a.halfedges,u=h.length,c=0;c<u;){if(_=h[c].getEndpoint(),p=h[(c+1)%u].getStartpoint(),B(_.x-p.x)>=this.eps()||B(_.y-p.y)>=this.eps())switch(!0){case(this.equalWithEpsilon(_.x,t)&&this.lessThanWithEpsilon(_.y,n)):if(v=this.equalWithEpsilon(p.x,t),y=this.createVertex(t,v?p.y:n),d=this.createBorderEdge(a.site,_,y),c++,h.splice(c,0,this.createHalfedge(d,a.site,null)),u++,v)break;_=y;case(this.equalWithEpsilon(_.y,n)&&this.lessThanWithEpsilon(_.x,l)):if(v=this.equalWithEpsilon(p.y,n),y=this.createVertex(v?p.x:l,n),d=this.createBorderEdge(a.site,_,y),c++,h.splice(c,0,this.createHalfedge(d,a.site,null)),u++,v)break;_=y;case(this.equalWithEpsilon(_.x,l)&&this.greaterThanWithEpsilon(_.y,r)):if(v=this.equalWithEpsilon(p.x,l),y=this.createVertex(l,v?p.y:r),d=this.createBorderEdge(a.site,_,y),c++,h.splice(c,0,this.createHalfedge(d,a.site,null)),u++,v)break;_=y;case(this.equalWithEpsilon(_.y,r)&&this.greaterThanWithEpsilon(_.x,t)):if(v=this.equalWithEpsilon(p.y,r),y=this.createVertex(v?p.x:t,r),d=this.createBorderEdge(a.site,_,y),c++,h.splice(c,0,this.createHalfedge(d,a.site,null)),u++,v||(_=y,v=this.equalWithEpsilon(p.x,t),y=this.createVertex(t,v?p.y:n),d=this.createBorderEdge(a.site,_,y),c++,h.splice(c,0,this.createHalfedge(d,a.site,null)),u++,v)||(_=y,v=this.equalWithEpsilon(p.y,n),y=this.createVertex(v?p.x:l,n),d=this.createBorderEdge(a.site,_,y),c++,h.splice(c,0,this.createHalfedge(d,a.site,null)),u++,v)||(_=y,v=this.equalWithEpsilon(p.x,l),y=this.createVertex(l,v?p.y:r),d=this.createBorderEdge(a.site,_,y),c++,h.splice(c,0,this.createHalfedge(d,a.site,null)),u++,v))break;default:throw"Voronoi.closeCells() > this makes no sense!"}c++}a.closeMe=!1}},i}(),Dt=rt.Voronoi=Ot;const Qt=i=>{const e=new Dt;let t=0,l=0,r=0,n=0;for(let s=0;s<i.length;s++){let a=i[s];a.x<t&&(t=a.x),a.x>l&&(l=a.x),a.y<r&&(r=a.y),a.y>n&&(n=a.y)}let o={xl:t,xr:l,yt:r,yb:n};return e.compute(i,o)};function at(i){if(!i||i.length===0)return"";let e=[];const t=i.shift();let l=t.getStartpoint(),r=t.getEndpoint();e.push(`M ${l.x} ${l.y}`),e.push(`L ${r.x} ${r.y}`);for(let n of i){let o=n.getEndpoint();e.push(`L ${o.x} ${o.y}`)}return e.push("Z"),e.join(" ")}function Zt(i,e,t,l){let r=[],n=0;for(let c=e;c>=0;c--){const h=i-c*i/e,u=l/180*Math.PI*h;n+=u}const o=n/t;let s=0,a=0;for(let c=e;c>=0;c--){const h=i-c*i/e,u=l/180*Math.PI*h;let d=Math.ceil(u/o);s+d>t&&(d=t-s);const _=u/d,y=(l-180)/180*Math.PI/2;for(let p=0;p<d;p++){s++;const v=p*_/h+_/h/2,B=-h*Math.cos(v-y),M=-h*Math.sin(v-y);r.push({id:c,x:B,y:M,a,angle:v})}a++}return r.sort((c,h)=>c.angle-h.angle),r}function ft(i,e,t){const l=i.slice();return l[33]=e[t],l[35]=t,l}function ot(i,e,t){const l=i.slice();return l[36]=e[t],l[35]=t,l}function ct(i,e,t){const l=i.slice();return l[36]=e[t],l}function ht(i,e,t){const l=i.slice();return l[40]=e[t],l[35]=t,l}function ut(i){let e,t;return{c(){e=V("path"),f(e,"d",t=`M ${i[1]-i[35]*(i[1]/i[2])},0 A ${i[1]-i[35]*(i[1]/i[2])},${i[1]-i[35]*(i[1]/i[2])} 0 0,0 ${-(i[1]-i[35]*(i[1]/i[2]))},0`),f(e,"fill","transparent"),f(e,"stroke","white"),f(e,"stroke-width","1"),f(e,"opacity","0.4")},m(l,r){q(l,e,r)},p(l,r){r[0]&6&&t!==(t=`M ${l[1]-l[35]*(l[1]/l[2])},0 A ${l[1]-l[35]*(l[1]/l[2])},${l[1]-l[35]*(l[1]/l[2])} 0 0,0 ${-(l[1]-l[35]*(l[1]/l[2]))},0`)&&f(e,"d",t)},d(l){l&&A(e)}}}function Gt(i){let e,t,l,r,n,o;return{c(){var s,a,c,h,u;e=V("circle"),f(e,"data-party",t=(s=i[36].data)==null?void 0:s.id),f(e,"cx",l=i[36].x),f(e,"cy",r=i[36].y),f(e,"r",i[3]),f(e,"fill",n=(a=i[36].data)==null?void 0:a.color),f(e,"opacity",o=(c=i[0])!=null&&c.id?((h=i[36].data)==null?void 0:h.id)===((u=i[0])==null?void 0:u.id)?1:.5:1)},m(s,a){q(s,e,a)},p(s,a){var c,h,u,d,_;a[0]&512&&t!==(t=(c=s[36].data)==null?void 0:c.id)&&f(e,"data-party",t),a[0]&512&&l!==(l=s[36].x)&&f(e,"cx",l),a[0]&512&&r!==(r=s[36].y)&&f(e,"cy",r),a[0]&8&&f(e,"r",s[3]),a[0]&512&&n!==(n=(h=s[36].data)==null?void 0:h.color)&&f(e,"fill",n),a[0]&513&&o!==(o=(u=s[0])!=null&&u.id?((d=s[36].data)==null?void 0:d.id)===((_=s[0])==null?void 0:_.id)?1:.5:1)&&f(e,"opacity",o)},d(s){s&&A(e)}}}function Ut(i){let e,t,l,r,n;return{c(){var o,s,a,c,h;e=V("path"),f(e,"d",Kt),f(e,"transform",t=`translate(${i[36].x},${i[36].y}) rotate(-5) scale(0.07)`),f(e,"data-party",l=(o=i[36].data)==null?void 0:o.id),f(e,"fill",r=(s=i[36].data)==null?void 0:s.color),f(e,"opacity",n=(a=i[0])!=null&&a.id?((c=i[36].data)==null?void 0:c.id)===((h=i[0])==null?void 0:h.id)?1:.5:1)},m(o,s){q(o,e,s)},p(o,s){var a,c,h,u,d;s[0]&512&&t!==(t=`translate(${o[36].x},${o[36].y}) rotate(-5) scale(0.07)`)&&f(e,"transform",t),s[0]&512&&l!==(l=(a=o[36].data)==null?void 0:a.id)&&f(e,"data-party",l),s[0]&512&&r!==(r=(c=o[36].data)==null?void 0:c.color)&&f(e,"fill",r),s[0]&513&&n!==(n=(h=o[0])!=null&&h.id?((u=o[36].data)==null?void 0:u.id)===((d=o[0])==null?void 0:d.id)?1:.5:1)&&f(e,"opacity",n)},d(o){o&&A(e)}}}function dt(i){let e;function t(n,o){return n[7]==="hexagon"?Ut:Gt}let l=t(i),r=l(i);return{c(){r.c(),e=Fe()},m(n,o){r.m(n,o),q(n,e,o)},p(n,o){l===(l=t(n))&&r?r.p(n,o):(r.d(1),r=l(n),r&&(r.c(),r.m(e.parentNode,e)))},d(n){n&&A(e),r.d(n)}}}function gt(i){let e,t=`${i[35]}`,l,r,n;return{c(){e=V("text"),l=x(t),f(e,"x",r=i[36].x),f(e,"y",n=i[36].y),f(e,"text-anchor","middle"),f(e,"alignment-baseline","middle"),f(e,"fill","white"),f(e,"font-size","8")},m(o,s){q(o,e,s),b(e,l)},p(o,s){s[0]&512&&r!==(r=o[36].x)&&f(e,"x",r),s[0]&512&&n!==(n=o[36].y)&&f(e,"y",n)},d(o){o&&A(e)}}}function _t(i){let e,t,l,r,n,o;function s(){return i[24](i[33])}function a(){return i[25](i[33])}function c(){return i[28](i[33])}function h(...u){return i[29](i[33],...u)}return{c(){e=V("path"),f(e,"class","voronoi_path"),f(e,"d",t=at(i[33].halfedges).toString()),f(e,"fill","transparent"),f(e,"stroke",l=i[8].includes("voronoi")?"white":"transparent"),f(e,"stroke-width",r=i[8].includes("voronoi")?1:0),f(e,"role","button"),f(e,"tabindex",i[35])},m(u,d){q(u,e,d),n||(o=[oe(e,"mouseover",s),oe(e,"focus",a),oe(e,"mouseout",i[26]),oe(e,"blur",i[27]),oe(e,"click",c),oe(e,"keypress",h)],n=!0)},p(u,d){i=u,d[0]&4096&&t!==(t=at(i[33].halfedges).toString())&&f(e,"d",t),d[0]&256&&l!==(l=i[8].includes("voronoi")?"white":"transparent")&&f(e,"stroke",l),d[0]&256&&r!==(r=i[8].includes("voronoi")?1:0)&&f(e,"stroke-width",r)},d(u){u&&A(e),n=!1,fe(o)}}}function pt(i){var l;let e,t=((l=i[33].halfedges)==null?void 0:l.length)>0&&_t(i);return{c(){t&&t.c(),e=Fe()},m(r,n){t&&t.m(r,n),q(r,e,n)},p(r,n){var o;((o=r[33].halfedges)==null?void 0:o.length)>0?t?t.p(r,n):(t=_t(r),t.c(),t.m(e.parentNode,e)):t&&(t.d(1),t=null)},d(r){r&&A(e),t&&t.d(r)}}}function yt(i){let e,t=`${i[0].text}`,l;return{c(){e=V("text"),l=x(t),f(e,"x",0),f(e,"y",0),f(e,"text-anchor","middle"),f(e,"alignment-baseline","middle"),f(e,"fill",i[4]),f(e,"font-size",i[5])},m(r,n){q(r,e,n),b(e,l)},p(r,n){n[0]&1&&t!==(t=`${r[0].text}`)&&K(l,t),n[0]&16&&f(e,"fill",r[4]),n[0]&32&&f(e,"font-size",r[5])},d(r){r&&A(e)}}}function Yt(i){let e,t,l,r,n,o,s,a,c,h,u,d,_,y,p,v,B,M,C,P=`${i[1]}, 0`,S,z,ee,L,ge=`${i[1]}, ${-i[1]}`,ne,te,ie,U,_e,se,J,pe=`-${i[1]}, ${-i[1]}`,Be,E,I,R,Ae,qe,Ce,Y,Pe=`-${i[1]}, 0`,Ue,Te,ae,xe,Re,ye=G(Array(i[2])),N=[];for(let g=0;g<ye.length;g+=1)N[g]=ut(ht(i,ye,g));let ve=G(i[9]),F=[];for(let g=0;g<ve.length;g+=1)F[g]=dt(ct(i,ve,g));let me=G(i[9]),H=[];for(let g=0;g<me.length;g+=1)H[g]=gt(ot(i,me,g));let Ee=G(i[12].cells),j=[];for(let g=0;g<Ee.length;g+=1)j[g]=pt(ft(i,Ee,g));let W=i[0]&&yt(i);return{c(){var g,w;e=O("main"),t=V("svg"),l=V("g");for(let k=0;k<N.length;k+=1)N[k].c();n=V("g");for(let k=0;k<F.length;k+=1)F[k].c();s=V("g");for(let k=0;k<H.length;k+=1)H[k].c();c=V("g");for(let k=0;k<j.length;k+=1)j[k].c();u=V("g"),W&&W.c(),_=V("g"),y=V("g"),p=V("text"),v=x("0, 0"),B=V("circle"),M=V("g"),C=V("text"),S=x(P),z=V("circle"),ee=V("g"),L=V("text"),ne=x(ge),U=V("circle"),se=V("g"),J=V("text"),Be=x(pe),R=V("circle"),Ce=V("g"),Y=V("text"),Ue=x(Pe),ae=V("circle"),f(l,"id","arcs"),f(l,"transform",r=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),f(l,"class","svelte-smqp4o"),Z(l,"hide",!i[8].includes("arcs")),f(n,"id","points"),f(n,"transform",o=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),f(n,"class","svelte-smqp4o"),Z(n,"hide",!i[8].includes("points")),f(s,"id","numbers"),f(s,"transform",a=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),f(s,"class","svelte-smqp4o"),Z(s,"hide",!i[8].includes("numbers")),f(c,"id","voronoi"),f(c,"transform",h=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),f(u,"id","text"),f(u,"transform",d=`translate(${((g=i[6])==null?void 0:g.x)||i[1]+i[11]}, ${((w=i[6])==null?void 0:w.y)||i[1]+i[10]+20})`),f(u,"class","svelte-smqp4o"),Z(u,"hide",!i[8].includes("text")),f(p,"x","0"),f(p,"y","10"),f(p,"text-anchor","middle"),f(p,"alignment-baseline","middle"),f(p,"fill","white"),f(p,"font-size","8"),f(B,"cx","0"),f(B,"cy","0"),f(B,"r","2"),f(B,"fill","white"),f(y,"class","reference_points"),f(C,"x",i[1]),f(C,"y","10"),f(C,"text-anchor","middle"),f(C,"alignment-baseline","middle"),f(C,"fill","white"),f(C,"font-size","8"),f(z,"cx",i[1]),f(z,"cy",0),f(z,"r","2"),f(z,"fill","white"),f(M,"class","reference_points"),f(L,"x",te=i[1]-10),f(L,"y",ie=-i[1]+10),f(L,"text-anchor","middle"),f(L,"alignment-baseline","middle"),f(L,"fill","white"),f(L,"font-size","8"),f(U,"cx",i[1]),f(U,"cy",_e=-i[1]),f(U,"r","2"),f(U,"fill","white"),f(ee,"class","reference_points"),f(J,"x",E=-i[1]+10),f(J,"y",I=-i[1]+10),f(J,"text-anchor","middle"),f(J,"alignment-baseline","middle"),f(J,"fill","white"),f(J,"font-size","8"),f(R,"cx",Ae=-i[1]),f(R,"cy",qe=-i[1]),f(R,"r","2"),f(R,"fill","white"),f(se,"class","reference_points"),f(Y,"x",Te=-i[1]),f(Y,"y",10),f(Y,"text-anchor","middle"),f(Y,"alignment-baseline","middle"),f(Y,"fill","white"),f(Y,"font-size","8"),f(ae,"cx",xe=-i[1]),f(ae,"cy",0),f(ae,"r","2"),f(ae,"fill","white"),f(Ce,"class","reference_points"),f(_,"id","referencePoints"),f(_,"transform",Re=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),f(_,"class","svelte-smqp4o"),Z(_,"hide",!i[8].includes("referencePoints")),f(t,"width",i[13]),f(t,"height",i[14])},m(g,w){q(g,e,w),b(e,t),b(t,l);for(let k=0;k<N.length;k+=1)N[k]&&N[k].m(l,null);b(t,n);for(let k=0;k<F.length;k+=1)F[k]&&F[k].m(n,null);b(t,s);for(let k=0;k<H.length;k+=1)H[k]&&H[k].m(s,null);b(t,c);for(let k=0;k<j.length;k+=1)j[k]&&j[k].m(c,null);b(t,u),W&&W.m(u,null),b(t,_),b(_,y),b(y,p),b(p,v),b(y,B),b(_,M),b(M,C),b(C,S),b(M,z),b(_,ee),b(ee,L),b(L,ne),b(ee,U),b(_,se),b(se,J),b(J,Be),b(se,R),b(_,Ce),b(Ce,Y),b(Y,Ue),b(Ce,ae)},p(g,w){var k,kt;if(w[0]&6){ye=G(Array(g[2]));let m;for(m=0;m<ye.length;m+=1){const D=ht(g,ye,m);N[m]?N[m].p(D,w):(N[m]=ut(D),N[m].c(),N[m].m(l,null))}for(;m<N.length;m+=1)N[m].d(1);N.length=ye.length}if(w[0]&3074&&r!==(r=`translate(${g[1]+g[11]}, ${g[1]+g[10]})`)&&f(l,"transform",r),w[0]&256&&Z(l,"hide",!g[8].includes("arcs")),w[0]&649){ve=G(g[9]);let m;for(m=0;m<ve.length;m+=1){const D=ct(g,ve,m);F[m]?F[m].p(D,w):(F[m]=dt(D),F[m].c(),F[m].m(n,null))}for(;m<F.length;m+=1)F[m].d(1);F.length=ve.length}if(w[0]&3074&&o!==(o=`translate(${g[1]+g[11]}, ${g[1]+g[10]})`)&&f(n,"transform",o),w[0]&256&&Z(n,"hide",!g[8].includes("points")),w[0]&512){me=G(g[9]);let m;for(m=0;m<me.length;m+=1){const D=ot(g,me,m);H[m]?H[m].p(D,w):(H[m]=gt(D),H[m].c(),H[m].m(s,null))}for(;m<H.length;m+=1)H[m].d(1);H.length=me.length}if(w[0]&3074&&a!==(a=`translate(${g[1]+g[11]}, ${g[1]+g[10]})`)&&f(s,"transform",a),w[0]&256&&Z(s,"hide",!g[8].includes("numbers")),w[0]&233728){Ee=G(g[12].cells);let m;for(m=0;m<Ee.length;m+=1){const D=ft(g,Ee,m);j[m]?j[m].p(D,w):(j[m]=pt(D),j[m].c(),j[m].m(c,null))}for(;m<j.length;m+=1)j[m].d(1);j.length=Ee.length}w[0]&3074&&h!==(h=`translate(${g[1]+g[11]}, ${g[1]+g[10]})`)&&f(c,"transform",h),g[0]?W?W.p(g,w):(W=yt(g),W.c(),W.m(u,null)):W&&(W.d(1),W=null),w[0]&3138&&d!==(d=`translate(${((k=g[6])==null?void 0:k.x)||g[1]+g[11]}, ${((kt=g[6])==null?void 0:kt.y)||g[1]+g[10]+20})`)&&f(u,"transform",d),w[0]&256&&Z(u,"hide",!g[8].includes("text")),w[0]&2&&P!==(P=`${g[1]}, 0`)&&K(S,P),w[0]&2&&f(C,"x",g[1]),w[0]&2&&f(z,"cx",g[1]),w[0]&2&&ge!==(ge=`${g[1]}, ${-g[1]}`)&&K(ne,ge),w[0]&2&&te!==(te=g[1]-10)&&f(L,"x",te),w[0]&2&&ie!==(ie=-g[1]+10)&&f(L,"y",ie),w[0]&2&&f(U,"cx",g[1]),w[0]&2&&_e!==(_e=-g[1])&&f(U,"cy",_e),w[0]&2&&pe!==(pe=`-${g[1]}, ${-g[1]}`)&&K(Be,pe),w[0]&2&&E!==(E=-g[1]+10)&&f(J,"x",E),w[0]&2&&I!==(I=-g[1]+10)&&f(J,"y",I),w[0]&2&&Ae!==(Ae=-g[1])&&f(R,"cx",Ae),w[0]&2&&qe!==(qe=-g[1])&&f(R,"cy",qe),w[0]&2&&Pe!==(Pe=`-${g[1]}, 0`)&&K(Ue,Pe),w[0]&2&&Te!==(Te=-g[1])&&f(Y,"x",Te),w[0]&2&&xe!==(xe=-g[1])&&f(ae,"cx",xe),w[0]&3074&&Re!==(Re=`translate(${g[1]+g[11]}, ${g[1]+g[10]})`)&&f(_,"transform",Re),w[0]&256&&Z(_,"hide",!g[8].includes("referencePoints")),w[0]&8192&&f(t,"width",g[13]),w[0]&16384&&f(t,"height",g[14])},i:T,o:T,d(g){g&&A(e),be(N,g),be(F,g),be(H,g),be(j,g),W&&W.d()}}}let Kt="M86.60254037844386 12L173.20508075688772 50L173.20508075688772 150L86.60254037844386 200L0 150L0 50Z";function Xt(i,e,t){let{data:l=[]}=e,{r=300}=e,{rows:n=12}=e,{dotsize:o=5}=e,{padding:s=10}=e,{total_seats:a}=e,{color:c="white"}=e,{font_size:h=12}=e,{arc:u=180}=e,{text_position:d=null}=e,{selectedShape:_="circle"}=e,{display:y=["points","text"]}=e,{current_party:p=null}=e,v=[],B=null,M=!1,C=0,P=0,S=0,z=0,ee=0,L=0;function ge(){Array.isArray(s)?s.length===2?(t(10,C=s[0]),t(22,P=s[0]),t(11,S=s[1]),t(23,z=s[1])):s.length===4&&(t(10,C=s[0]),t(22,P=s[1]),t(11,S=s[2]),t(23,z=s[3])):(t(10,C=s),t(22,P=s),t(11,S=s),t(23,z=s))}function ne(E){E.data&&!M&&t(0,p=E.data)}function te(E){E.data&&(p&&M&&p.id===E.data.id?(t(0,p=null),M=!1):(t(0,p=E.data),M=!0))}function ie(){M||t(0,p=null)}const U=E=>{ne(E.site)},_e=E=>ne(E.site),se=()=>ie(),J=()=>ie(),pe=E=>{te(E.site)},Be=(E,I)=>{I.key==="Enter"&&te(E.site)};return i.$$set=E=>{"data"in E&&t(19,l=E.data),"r"in E&&t(1,r=E.r),"rows"in E&&t(2,n=E.rows),"dotsize"in E&&t(3,o=E.dotsize),"padding"in E&&t(20,s=E.padding),"total_seats"in E&&t(21,a=E.total_seats),"color"in E&&t(4,c=E.color),"font_size"in E&&t(5,h=E.font_size),"arc"in E&&t(18,u=E.arc),"text_position"in E&&t(6,d=E.text_position),"selectedShape"in E&&t(7,_=E.selectedShape),"display"in E&&t(8,y=E.display),"current_party"in E&&t(0,p=E.current_party)},i.$$.update=()=>{if(i.$$.dirty[0]&15470086){u<10&&t(18,u=10),u>360&&t(18,u=360),ge(),l.sort((I,R)=>R.count-I.count),l.reduce((I,R)=>I+R.count,0),t(9,v=Zt(r,n,a,u));let E=0;for(let I in l)for(let R=0;R<l[I].count;R++)t(9,v[E].data=l[I],v),E++;t(12,B=Qt(v)),t(13,ee=r*2+S+z),t(14,L=r*2+C+P)}},[p,r,n,o,c,h,d,_,y,v,C,S,B,ee,L,ne,te,ie,u,l,s,a,P,z,U,_e,se,J,pe,Be]}class $t extends Ie{constructor(e){super(),Je(this,e,Xt,Yt,Ne,{data:19,r:1,rows:2,dotsize:3,padding:20,total_seats:21,color:4,font_size:5,arc:18,text_position:6,selectedShape:7,display:8,current_party:0},null,[-1,-1])}}function vt(i,e,t){const l=i.slice();return l[4]=e[t],l}function mt(i){let e,t=i[4]+"",l;return{c(){e=O("th"),l=x(t)},m(r,n){q(r,e,n),b(e,l)},p(r,n){n&1&&t!==(t=r[4]+"")&&K(l,t)},d(r){r&&A(e)}}}function ei(i){let e,t,l,r,n,o=G(i[0]),s=[];for(let a=0;a<o.length;a+=1)s[a]=mt(vt(i,o,a));return{c(){e=O("table"),t=O("thead"),l=O("tr");for(let a=0;a<s.length;a+=1)s[a].c();r=le(),n=O("tbody"),n.innerHTML="<tr><td>ANC</td> <td>10,000,000</td> <td>200</td></tr> <tr><td>DA</td> <td>5,000,000</td> <td>100</td></tr> <tr><td>EFF</td> <td>2,000,000</td> <td>40</td></tr>"},m(a,c){q(a,e,c),b(e,t),b(t,l);for(let h=0;h<s.length;h+=1)s[h]&&s[h].m(l,null);b(e,r),b(e,n)},p(a,[c]){if(c&1){o=G(a[0]);let h;for(h=0;h<o.length;h+=1){const u=vt(a,o,h);s[h]?s[h].p(u,c):(s[h]=mt(u),s[h].c(),s[h].m(l,null))}for(;h<s.length;h+=1)s[h].d(1);s.length=o.length}},i:T,o:T,d(a){a&&A(e),be(s,a)}}}function ti(i,e,t){let{selected_year:l=2024}=e,{selected_election:r="National Assembly"}=e,{selected_region:n="National"}=e,{selected_fields:o=["Party","Votes","Seats"]}=e;return i.$$set=s=>{"selected_year"in s&&t(1,l=s.selected_year),"selected_election"in s&&t(2,r=s.selected_election),"selected_region"in s&&t(3,n=s.selected_region),"selected_fields"in s&&t(0,o=s.selected_fields)},[o,l,r,n]}class ii extends Ie{constructor(e){super(),Je(this,e,ti,ei,Ne,{selected_year:1,selected_election:2,selected_region:3,selected_fields:0})}}function Et(i){let e,t;return e=new $t({props:{data:i[5],total_seats:ri,rows:ni}}),{c(){lt(e.$$.fragment)},m(l,r){We(e,l,r),t=!0},p(l,r){const n={};r&32&&(n.data=l[5]),e.$set(n)},i(l){t||(X(e.$$.fragment,l),t=!0)},o(l){de(e.$$.fragment,l),t=!1},d(l){ze(e,l)}}}function bt(i){let e,t,l,r,n,o,s,a,c,h,u,d,_,y;return{c(){e=O("h1"),e.textContent="Carto",t=le(),l=O("ul"),r=O("li"),n=x("Year: "),o=x(i[1]),s=le(),a=O("li"),c=x("Election: "),h=x(i[2]),u=le(),d=O("li"),_=x("Region: "),y=x(i[3])},m(p,v){q(p,e,v),q(p,t,v),q(p,l,v),b(l,r),b(r,n),b(r,o),b(l,s),b(l,a),b(a,c),b(a,h),b(l,u),b(l,d),b(d,_),b(d,y)},p(p,v){v&2&&K(o,p[1]),v&4&&K(h,p[2]),v&8&&K(y,p[3])},d(p){p&&(A(e),A(t),A(l))}}}function wt(i){let e,t,l,r;return l=new ii({props:{selected_year:i[1],selected_election:i[2],selected_region:i[3],selected_fields:i[4]}}),{c(){e=O("h1"),e.textContent="Table",t=le(),lt(l.$$.fragment)},m(n,o){q(n,e,o),q(n,t,o),We(l,n,o),r=!0},p(n,o){const s={};o&2&&(s.selected_year=n[1]),o&4&&(s.selected_election=n[2]),o&8&&(s.selected_region=n[3]),o&16&&(s.selected_fields=n[4]),l.$set(s)},i(n){r||(X(l.$$.fragment,n),r=!0)},o(n){de(l.$$.fragment,n),r=!1},d(n){n&&(A(e),A(t)),ze(l,n)}}}function li(i){let e,t,l,r,n=i[0]==="hemicycle"&&Et(i),o=i[0]==="carto"&&bt(i),s=i[0]==="table"&&wt(i);return{c(){n&&n.c(),e=le(),o&&o.c(),t=le(),s&&s.c(),l=Fe()},m(a,c){n&&n.m(a,c),q(a,e,c),o&&o.m(a,c),q(a,t,c),s&&s.m(a,c),q(a,l,c),r=!0},p(a,[c]){a[0]==="hemicycle"?n?(n.p(a,c),c&1&&X(n,1)):(n=Et(a),n.c(),X(n,1),n.m(e.parentNode,e)):n&&(tt(),de(n,1,1,()=>{n=null}),it()),a[0]==="carto"?o?o.p(a,c):(o=bt(a),o.c(),o.m(t.parentNode,t)):o&&(o.d(1),o=null),a[0]==="table"?s?(s.p(a,c),c&1&&X(s,1)):(s=wt(a),s.c(),X(s,1),s.m(l.parentNode,l)):s&&(tt(),de(s,1,1,()=>{s=null}),it())},i(a){r||(X(n),X(s),r=!0)},o(a){de(n),de(s),r=!1},d(a){a&&(A(e),A(t),A(l)),n&&n.d(a),o&&o.d(a),s&&s.d(a)}}}const ri=400,ni=12;function si(i,e,t){let{visualisation:l="hemicycle"}=e,{selected_year:r=2024}=e,{selected_election:n="National Assembly"}=e,{selected_region:o="Gauteng"}=e,{selected_fields:s=["Party","Votes","Seats"]}=e,a=[];const c=["#FF0000","#0000FF","#008000","#FFA500","#FFFF00","#800080","#FFC0CB","#00FFFF","#FF00FF","#000000","#808080","#800000","#008080","#800080","#000080","#808000","#008000"];return Vt(async()=>{const u=await(await fetch("https://iec-api.revengine.dailymaverick.co.za/results/seats/national/2019")).json();t(5,a=u.partyResults.map((d,_)=>({id:_,text:d.Abbreviation,count:d.Seats,color:c[_]})))}),i.$$set=h=>{"visualisation"in h&&t(0,l=h.visualisation),"selected_year"in h&&t(1,r=h.selected_year),"selected_election"in h&&t(2,n=h.selected_election),"selected_region"in h&&t(3,o=h.selected_region),"selected_fields"in h&&t(4,s=h.selected_fields)},[l,r,n,o,s,a]}class ai extends Ie{constructor(e){super(),Je(this,e,si,li,Ne,{visualisation:0,selected_year:1,selected_election:2,selected_region:3,selected_fields:4})}}console.log("App"),jQuery(()=>{document.querySelectorAll(".wp-block-tenlayer-election-engine").forEach(e=>{var l;let t={id:e.id,visualisation:jQuery(e).data("visualisation"),selected_year:jQuery(e).data("selected_year"),selected_election:jQuery(e).data("selected_election"),selected_region:jQuery(e).data("selected_region"),selected_fields:(l=jQuery(e).data("selected_fields"))==null?void 0:l.split(",").map(r=>r.trim())};new ai({target:e,props:t})})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
