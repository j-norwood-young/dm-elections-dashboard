(function(H){typeof define=="function"&&define.amd?define(H):H()})(function(){"use strict";var ei=Object.defineProperty;var ti=(H,I,U)=>I in H?ei(H,I,{enumerable:!0,configurable:!0,writable:!0,value:U}):H[I]=U;var Ie=(H,I,U)=>(ti(H,typeof I!="symbol"?I+"":I,U),U);function H(){}function I(i){return i()}function U(){return Object.create(null)}function le(i){i.forEach(I)}function Oe(i){return typeof i=="function"}function De(i,e){return i!=i?e==e:i!==e||i&&typeof i=="object"||typeof i=="function"}function gt(i){return Object.keys(i).length===0}function M(i,e){i.appendChild(e)}function O(i,e,t){i.insertBefore(e,t||null)}function N(i){i.parentNode&&i.parentNode.removeChild(i)}function we(i,e){for(let t=0;t<i.length;t+=1)i[t]&&i[t].d(e)}function _t(i){return document.createElement(i)}function V(i){return document.createElementNS("http://www.w3.org/2000/svg",i)}function G(i){return document.createTextNode(i)}function Pe(){return G("")}function ne(i,e,t,r){return i.addEventListener(e,t,r),()=>i.removeEventListener(e,t,r)}function a(i,e,t){t==null?i.removeAttribute(e):i.getAttribute(e)!==t&&i.setAttribute(e,t)}function vt(i){return Array.from(i.childNodes)}function _e(i,e){e=""+e,i.data!==e&&(i.data=e)}function D(i,e,t){i.classList.toggle(e,!!t)}let ve;function ye(i){ve=i}function yt(){if(!ve)throw new Error("Function called outside component initialization");return ve}function mt(i){yt().$$.on_mount.push(i)}const se=[],Ze=[];let ae=[];const Qe=[],Et=Promise.resolve();let Re=!1;function bt(){Re||(Re=!0,Et.then(Ue))}function Te(i){ae.push(i)}const He=new Set;let fe=0;function Ue(){if(fe!==0)return;const i=ve;do{try{for(;fe<se.length;){const e=se[fe];fe++,ye(e),wt(e.$$)}}catch(e){throw se.length=0,fe=0,e}for(ye(null),se.length=0,fe=0;Ze.length;)Ze.pop()();for(let e=0;e<ae.length;e+=1){const t=ae[e];He.has(t)||(He.add(t),t())}ae.length=0}while(se.length);for(;Qe.length;)Qe.pop()();Re=!1,He.clear(),ye(i)}function wt(i){if(i.fragment!==null){i.update(),le(i.before_update);const e=i.dirty;i.dirty=[-1],i.fragment&&i.fragment.p(i.ctx,e),i.after_update.forEach(Te)}}function kt(i){const e=[],t=[];ae.forEach(r=>i.indexOf(r)===-1?e.push(r):t.push(r)),t.forEach(r=>r()),ae=e}const ke=new Set;let ee;function xt(){ee={r:0,c:[],p:ee}}function Bt(){ee.r||le(ee.c),ee=ee.p}function me(i,e){i&&i.i&&(ke.delete(i),i.i(e))}function Fe(i,e,t,r){if(i&&i.o){if(ke.has(i))return;ke.add(i),ee.c.push(()=>{ke.delete(i),r&&(t&&i.d(1),r())}),i.o(e)}else r&&r()}function K(i){return(i==null?void 0:i.length)!==void 0?i:Array.from(i)}function Mt(i){i&&i.c()}function Ge(i,e,t){const{fragment:r,after_update:l}=i.$$;r&&r.m(e,t),Te(()=>{const n=i.$$.on_mount.map(I).filter(Oe);i.$$.on_destroy?i.$$.on_destroy.push(...n):le(n),i.$$.on_mount=[]}),l.forEach(Te)}function Ke(i,e){const t=i.$$;t.fragment!==null&&(kt(t.after_update),le(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function Vt(i,e){i.$$.dirty[0]===-1&&(se.push(i),bt(),i.$$.dirty.fill(0)),i.$$.dirty[e/31|0]|=1<<e%31}function Xe(i,e,t,r,l,n,c=null,s=[-1]){const f=ve;ye(i);const o=i.$$={fragment:null,ctx:[],props:n,update:H,not_equal:l,bound:U(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(f?f.$$.context:[])),callbacks:U(),dirty:s,skip_bound:!1,root:e.target||f.$$.root};c&&c(o.root);let u=!1;if(o.ctx=t?t(i,e.props||{},(h,d,...g)=>{const v=g.length?g[0]:d;return o.ctx&&l(o.ctx[h],o.ctx[h]=v)&&(!o.skip_bound&&o.bound[h]&&o.bound[h](v),u&&Vt(i,h)),d}):[],o.update(),u=!0,le(o.before_update),o.fragment=r?r(o.ctx):!1,e.target){if(e.hydrate){const h=vt(e.target);o.fragment&&o.fragment.l(h),h.forEach(N)}else o.fragment&&o.fragment.c();e.intro&&me(i.$$.fragment),Ge(i,e.target,e.anchor),Ue()}ye(f)}class Ye{constructor(){Ie(this,"$$");Ie(this,"$$set")}$destroy(){Ke(this,1),this.$destroy=H}$on(e,t){if(!Oe(t))return H;const r=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return r.push(t),()=>{const l=r.indexOf(t);l!==-1&&r.splice(l,1)}}$set(e){this.$$set&&!gt(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const Ct="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(Ct);var $e={},xe={};Object.defineProperty(xe,"__esModule",{value:!0});var St=function(){function i(){this.root=null}return i.prototype.insertSuccessor=function(e,t){var r;if(e){if(t.prev=e,t.next=e.next,e.next&&(e.next.prev=t),e.next=t,e.right){for(e=e.right;e.left;)e=e.left;e.left=t}else e.right=t;r=e}else this.root?(e=this.first(this.root),t.prev=null,t.next=e,e.prev=t,e.left=t,r=e):(t.prev=t.next=null,this.root=t,r=null);t.left=t.right=null,t.parent=r,t.red=!0;var l,n;for(e=t;r&&r.red;)l=r.parent,r===l.left?(n=l.right,n&&n.red?(r.red=n.red=!1,l.red=!0,e=l):(e===r.right&&(this.rotateLeft(r),e=r,r=e.parent),r.red=!1,l.red=!0,this.rotateRight(l))):(n=l.left,n&&n.red?(r.red=n.red=!1,l.red=!0,e=l):(e===r.left&&(this.rotateRight(r),e=r,r=e.parent),r.red=!1,l.red=!0,this.rotateLeft(l))),r=e.parent;this.root.red=!1},i.prototype.removeNode=function(e){e.next&&(e.next.prev=e.prev),e.prev&&(e.prev.next=e.next),e.next=e.prev=null;var t=e.parent,r=e.left,l=e.right,n=null;r?l?n=this.first(l):n=r:n=l,t?t.left===e?t.left=n:t.right=n:this.root=n;var c;if(r&&l?(c=n.red,n.red=e.red,n.left=r,r.parent=n,n!==l?(t=n.parent,n.parent=e.parent,e=n.right,t.left=e,n.right=l,l.parent=n):(n.parent=t,t=n,e=n.right)):(c=e.red,e=n),e&&(e.parent=t),!c){if(e&&e.red){e.red=!1;return}var s;do{if(e===this.root)break;if(e===t.left){if(s=t.right,s.red&&(s.red=!1,t.red=!0,this.rotateLeft(t),s=t.right),s.left&&s.left.red||s.right&&s.right.red){(!s.right||!s.right.red)&&(s.left.red=!1,s.red=!0,this.rotateRight(s),s=t.right),s.red=t.red,t.red=s.right.red=!1,this.rotateLeft(t),e=this.root;break}}else if(s=t.left,s.red&&(s.red=!1,t.red=!0,this.rotateRight(t),s=t.left),s.left&&s.left.red||s.right&&s.right.red){(!s.left||!s.left.red)&&(s.right.red=!1,s.red=!0,this.rotateLeft(s),s=t.left),s.red=t.red,t.red=s.left.red=!1,this.rotateRight(t),e=this.root;break}s.red=!0,e=t,t=t.parent}while(!e.red);e&&(e.red=!1)}},i.prototype.rotateLeft=function(e){var t=e,r=e.right,l=t.parent;l?l.left===t?l.left=r:l.right=r:this.root=r,r.parent=l,t.parent=r,t.right=r.left,t.right&&(t.right.parent=t),r.left=t},i.prototype.rotateRight=function(e){var t=e,r=e.left,l=t.parent;l?l.left===t?l.left=r:l.right=r:this.root=r,r.parent=l,t.parent=r,t.left=r.right,t.left&&(t.left.parent=t),r.right=t},i.prototype.first=function(e){for(;e.left;)e=e.left;return e},i.prototype.last=function(e){for(;e.right;)e=e.right;return e},i}();xe.RBTree=St;var At=function(){function i(){}return i}();xe.RBTreeNode=At;var Le={};Object.defineProperty(Le,"__esModule",{value:!0});var qt=function(){function i(e,t){this.x=e,this.y=t}return i}();Le.Vertex=qt;var We={};Object.defineProperty(We,"__esModule",{value:!0});var Pt=function(){function i(e,t){this.lSite=e,this.rSite=t,this.va=this.vb=null}return i}();We.Edge=Pt;var ze={};Object.defineProperty(ze,"__esModule",{value:!0});var Rt=function(){function i(e){this.site=e,this.halfedges=[],this.closeMe=!1}return i.prototype.init=function(e){return this.site=e,this.halfedges=[],this.closeMe=!1,this},i.prototype.prepareHalfedges=function(){for(var e=this.halfedges,t=e.length,r;t--;)r=e[t].edge,(!r.vb||!r.va)&&e.splice(t,1);return e.sort(function(l,n){return n.angle-l.angle}),e.length},i.prototype.getNeighborIds=function(){for(var e=[],t=this.halfedges.length,r;t--;)r=this.halfedges[t].edge,r.lSite!==null&&r.lSite.id!=this.site.id?e.push(r.lSite.id):r.rSite!==null&&r.rSite.id!=this.site.id&&e.push(r.rSite.id);return e},i.prototype.getBbox=function(){for(var e=this.halfedges,t=e.length,r=1/0,l=1/0,n=-1/0,c=-1/0,s,f,o;t--;)s=e[t].getStartpoint(),f=s.x,o=s.y,f<r&&(r=f),o<l&&(l=o),f>n&&(n=f),o>c&&(c=o);return{x:r,y:l,width:n-r,height:c-l}},i.prototype.pointIntersection=function(e,t){for(var r=this.halfedges,l=r.length,n,c,s,f;l--;){if(n=r[l],c=n.getStartpoint(),s=n.getEndpoint(),f=(t-c.y)*(s.x-c.x)-(e-c.x)*(s.y-c.y),!f)return 0;if(f>0)return-1}return 1},i}();ze.Cell=Rt;var Je={};Object.defineProperty(Je,"__esModule",{value:!0});var Tt=function(){function i(e){this.site=e}return i}();Je.Diagram=Tt;var Ne={};Object.defineProperty(Ne,"__esModule",{value:!0});var Ht=function(){function i(e,t,r){if(this.site=t,this.edge=e,r)this.angle=Math.atan2(r.y-t.y,r.x-t.x);else{var l=e.va,n=e.vb;this.angle=e.lSite===t?Math.atan2(n.x-l.x,l.y-n.y):Math.atan2(l.x-n.x,n.y-l.y)}}return i.prototype.getStartpoint=function(){return this.edge.lSite===this.site?this.edge.va:this.edge.vb},i.prototype.getEndpoint=function(){return this.edge.lSite===this.site?this.edge.vb:this.edge.va},i}();Ne.Halfedge=Ht,Object.defineProperty($e,"__esModule",{value:!0});var Be=xe,Ft=Le,et=We,Lt=ze,tt=Je,Wt=Ne,zt=function(){function i(){this.vertices=null,this.edges=null,this.cells=null,this.toRecycle=null,this.beachsectionJunkyard=[],this.circleEventJunkyard=[],this.vertexJunkyard=[],this.edgeJunkyard=[],this.cellJunkyard=[]}return i.prototype.compute=function(e,t){var r=new Date;this.reset(),this.toRecycle&&(this.vertexJunkyard=this.vertexJunkyard.concat(this.toRecycle.vertices),this.edgeJunkyard=this.edgeJunkyard.concat(this.toRecycle.edges),this.cellJunkyard=this.cellJunkyard.concat(this.toRecycle.cells),this.toRecycle=null);var l=e.slice(0);l.sort(function(g,v){var _=v.y-g.y;return _||v.x-g.x});for(var n=l.pop(),c=0,s,f,o=this.cells,u;;)if(u=this.firstCircleEvent,n&&(!u||n.y<u.y||n.y===u.y&&n.x<u.x))(n.x!==s||n.y!==f)&&(o[c]=this.createCell(n),n.id=c++,this.addBeachsection(n),f=n.y,s=n.x),n=l.pop();else if(u)this.removeBeachsection(u.arc);else break;this.clipEdges(t),this.closeCells(t);var h=new Date,d=new tt.Diagram;return d.cells=this.cells,d.edges=this.edges,d.vertices=this.vertices,d.execTime=h.getTime()-r.getTime(),this.reset(),d},i.prototype.sqrt=function(e){return Math.sqrt(e)},i.prototype.abs=function(e){return Math.abs(e)},i.prototype.eps=function(){return 1e-9},i.prototype.inveps=function(){return 1/this.eps()},i.prototype.equalWithEpsilon=function(e,t){return this.abs(e-t)<this.eps()},i.prototype.greaterThanWithEpsilon=function(e,t){return e-t>this.eps()},i.prototype.greaterThanOrEqualWithEpsilon=function(e,t){return t-e<this.eps()},i.prototype.lessThanWithEpsilon=function(e,t){return t-e>this.eps()},i.prototype.lessThanOrEqualWithEpsilon=function(e,t){return e-t<this.eps()},i.prototype.quantizeSites=function(e){for(var t=this.eps(),r=e.length,l;r--;)l=e[r],l.x=Math.floor(l.x/t)*t,l.y=Math.floor(l.y/t)*t},i.prototype.recycle=function(e){if(e)if(e instanceof tt.Diagram)this.toRecycle=e;else throw"Voronoi.recycleDiagram() > Need a Diagram object."},i.prototype.reset=function(){if(this.beachline||(this.beachline=new Be.RBTree),this.beachline.root)for(var e=this.beachline.first(this.beachline.root);e;)this.beachsectionJunkyard.push(e),e=e.next;this.beachline.root=null,this.circleEvents||(this.circleEvents=new Be.RBTree),this.circleEvents.root=this.firstCircleEvent=null,this.vertices=[],this.edges=[],this.cells=[]},i.prototype.createCell=function(e){var t=this.cellJunkyard.pop();return t?(t.init(e),t.init(e)):new Lt.Cell(e)},i.prototype.createHalfedge=function(e,t,r){return new Wt.Halfedge(e,t,r)},i.prototype.createVertex=function(e,t){var r=this.vertexJunkyard.pop();return r?(r.x=e,r.y=t):r=new Ft.Vertex(e,t),this.vertices.push(r),r},i.prototype.createEdge=function(e,t,r,l){r===void 0&&(r=null),l===void 0&&(l=null);var n=this.edgeJunkyard.pop();return n?(n.lSite=e,n.rSite=t,n.va=n.vb=null):n=new et.Edge(e,t),this.edges.push(n),r&&this.setEdgeStartpoint(n,e,t,r),l&&this.setEdgeEndpoint(n,e,t,l),this.cells[e.id].halfedges.push(this.createHalfedge(n,e,t)),this.cells[t.id].halfedges.push(this.createHalfedge(n,t,e)),n},i.prototype.createBorderEdge=function(e,t,r){var l=this.edgeJunkyard.pop();return l?(l.lSite=e,l.rSite=null):l=new et.Edge(e,null),l.va=t,l.vb=r,this.edges.push(l),l},i.prototype.setEdgeStartpoint=function(e,t,r,l){!e.va&&!e.vb?(e.va=l,e.lSite=t,e.rSite=r):e.lSite===r?e.vb=l:e.va=l},i.prototype.setEdgeEndpoint=function(e,t,r,l){this.setEdgeStartpoint(e,r,t,l)},i.prototype.createBeachsection=function(e){var t=this.beachsectionJunkyard.pop();return t||(t=new Be.RBTreeNode),t.site=e,t},i.prototype.leftBreakPoint=function(e,t){var r=e.site,l=r.x,n=r.y,c=n-t;if(!c)return l;var s=e.prev;if(!s)return-1/0;r=s.site;var f=r.x,o=r.y,u=o-t;if(!u)return f;var h=f-l,d=1/c-1/u,g=h/u;return d?(-g+this.sqrt(g*g-2*d*(h*h/(-2*u)-o+u/2+n-c/2)))/d+l:(l+f)/2},i.prototype.rightBreakPoint=function(e,t){var r=e.next;if(r)return this.leftBreakPoint(r,t);var l=e.site;return l.y===t?l.x:1/0},i.prototype.detachBeachsection=function(e){this.detachCircleEvent(e),this.beachline.removeNode(e),this.beachsectionJunkyard.push(e)},i.prototype.removeBeachsection=function(e){var t=e.circleEvent,r=t.x,l=t.ycenter,n=this.createVertex(r,l),c=e.prev,s=e.next,f=[e],o=Math.abs;this.detachBeachsection(e);for(var u=c;u.circleEvent&&o(r-u.circleEvent.x)<this.eps()&&o(l-u.circleEvent.ycenter)<this.eps();)c=u.prev,f.unshift(u),this.detachBeachsection(u),u=c;f.unshift(u),this.detachCircleEvent(u);for(var h=s;h.circleEvent&&o(r-h.circleEvent.x)<this.eps()&&o(l-h.circleEvent.ycenter)<this.eps();)s=h.next,f.push(h),this.detachBeachsection(h),h=s;f.push(h),this.detachCircleEvent(h);var d=f.length,g;for(g=1;g<d;g++)h=f[g],u=f[g-1],this.setEdgeStartpoint(h.edge,u.site,h.site,n);u=f[0],h=f[d-1],h.edge=this.createEdge(u.site,h.site,void 0,n),this.attachCircleEvent(u),this.attachCircleEvent(h)},i.prototype.addBeachsection=function(e){for(var t=e.x,r=e.y,l,n,c,s,f=this.beachline.root;f;)if(c=this.leftBreakPoint(f,r)-t,c>this.eps())f=f.left;else if(s=t-this.rightBreakPoint(f,r),s>this.eps()){if(!f.right){l=f;break}f=f.right}else{c>-this.eps()?(l=f.prev,n=f):s>-this.eps()?(l=f,n=f.next):l=n=f;break}var o=this.createBeachsection(e);if(this.beachline.insertSuccessor(l,o),!(!l&&!n)){if(l===n){this.detachCircleEvent(l),n=this.createBeachsection(l.site),this.beachline.insertSuccessor(o,n),o.edge=n.edge=this.createEdge(l.site,o.site),this.attachCircleEvent(l),this.attachCircleEvent(n);return}if(l&&!n){o.edge=this.createEdge(l.site,o.site);return}if(l!==n){this.detachCircleEvent(l),this.detachCircleEvent(n);var u=l.site,h=u.x,d=u.y,g=e.x-h,v=e.y-d,_=n.site,E=_.x-h,k=_.y-d,B=2*(g*k-v*E),x=g*g+v*v,S=E*E+k*k,C=this.createVertex((k*x-v*S)/B+h,(g*S-E*x)/B+d);this.setEdgeStartpoint(n.edge,u,_,C),o.edge=this.createEdge(u,e,void 0,C),n.edge=this.createEdge(e,_,void 0,C),this.attachCircleEvent(l),this.attachCircleEvent(n);return}}},i.prototype.attachCircleEvent=function(e){var t=e.prev,r=e.next;if(!(!t||!r)){var l=t.site,n=e.site,c=r.site;if(l!==c){var s=n.x,f=n.y,o=l.x-s,u=l.y-f,h=c.x-s,d=c.y-f,g=2*(o*d-u*h);if(!(g>=-2e-12)){var v=o*o+u*u,_=h*h+d*d,E=(d*v-u*_)/g,k=(o*_-h*v)/g,B=k+f,x=this.circleEventJunkyard.pop();x||(x=new Be.RBTreeNode),x.arc=e,x.site=n,x.x=E+s,x.y=B+this.sqrt(E*E+k*k),x.ycenter=B,e.circleEvent=x;for(var S=null,C=this.circleEvents.root;C;)if(x.y<C.y||x.y===C.y&&x.x<=C.x)if(C.left)C=C.left;else{S=C.prev;break}else if(C.right)C=C.right;else{S=C;break}this.circleEvents.insertSuccessor(S,x),S||(this.firstCircleEvent=x)}}}},i.prototype.detachCircleEvent=function(e){var t=e.circleEvent;t&&(t.prev||(this.firstCircleEvent=t.next),this.circleEvents.removeNode(t),this.circleEventJunkyard.push(t),e.circleEvent=null)},i.prototype.connectEdge=function(e,t){var r=e.vb;if(r)return!0;var l=e.va,n=t.xl,c=t.xr,s=t.yt,f=t.yb,o=e.lSite,u=e.rSite,h=o.x,d=o.y,g=u.x,v=u.y,_=(h+g)/2,E=(d+v)/2,k,B;if(this.cells[o.id].closeMe=!0,this.cells[u.id].closeMe=!0,v!==d&&(k=(h-g)/(v-d),B=E-k*_),k===void 0){if(_<n||_>=c)return!1;if(h>g){if(!l||l.y<s)l=this.createVertex(_,s);else if(l.y>=f)return!1;r=this.createVertex(_,f)}else{if(!l||l.y>f)l=this.createVertex(_,f);else if(l.y<s)return!1;r=this.createVertex(_,s)}}else if(k<-1||k>1)if(h>g){if(!l||l.y<s)l=this.createVertex((s-B)/k,s);else if(l.y>=f)return!1;r=this.createVertex((f-B)/k,f)}else{if(!l||l.y>f)l=this.createVertex((f-B)/k,f);else if(l.y<s)return!1;r=this.createVertex((s-B)/k,s)}else if(d<v){if(!l||l.x<n)l=this.createVertex(n,k*n+B);else if(l.x>=c)return!1;r=this.createVertex(c,k*c+B)}else{if(!l||l.x>c)l=this.createVertex(c,k*c+B);else if(l.x<n)return!1;r=this.createVertex(n,k*n+B)}return e.va=l,e.vb=r,!0},i.prototype.clipEdge=function(e,t){var r=e.va.x,l=e.va.y,n=e.vb.x,c=e.vb.y,s=0,f=1,o=n-r,u=c-l,h=r-t.xl;if(o===0&&h<0)return!1;var d=-h/o;if(o<0){if(d<s)return!1;d<f&&(f=d)}else if(o>0){if(d>f)return!1;d>s&&(s=d)}if(h=t.xr-r,o===0&&h<0)return!1;if(d=h/o,o<0){if(d>f)return!1;d>s&&(s=d)}else if(o>0){if(d<s)return!1;d<f&&(f=d)}if(h=l-t.yt,u===0&&h<0)return!1;if(d=-h/u,u<0){if(d<s)return!1;d<f&&(f=d)}else if(u>0){if(d>f)return!1;d>s&&(s=d)}if(h=t.yb-l,u===0&&h<0)return!1;if(d=h/u,u<0){if(d>f)return!1;d>s&&(s=d)}else if(u>0){if(d<s)return!1;d<f&&(f=d)}return s>0&&(e.va=this.createVertex(r+s*o,l+s*u)),f<1&&(e.vb=this.createVertex(r+f*o,l+f*u)),(s>0||f<1)&&(this.cells[e.lSite.id].closeMe=!0,this.cells[e.rSite.id].closeMe=!0),!0},i.prototype.clipEdges=function(e){for(var t=this.edges,r=t.length,l,n=Math.abs;r--;)l=t[r],(!this.connectEdge(l,e)||!this.clipEdge(l,e)||n(l.va.x-l.vb.x)<this.eps()&&n(l.va.y-l.vb.y)<this.eps())&&(l.va=l.vb=null,t.splice(r,1))},i.prototype.closeCells=function(e){for(var t=e.xl,r=e.xr,l=e.yt,n=e.yb,c=this.cells,s=c.length,f,o,u,h,d,g,v,_,E,k=Math.abs;s--;)if(f=c[s],!!f.prepareHalfedges()&&f.closeMe){for(u=f.halfedges,h=u.length,o=0;o<h;){if(g=u[o].getEndpoint(),_=u[(o+1)%h].getStartpoint(),k(g.x-_.x)>=this.eps()||k(g.y-_.y)>=this.eps())switch(!0){case(this.equalWithEpsilon(g.x,t)&&this.lessThanWithEpsilon(g.y,n)):if(E=this.equalWithEpsilon(_.x,t),v=this.createVertex(t,E?_.y:n),d=this.createBorderEdge(f.site,g,v),o++,u.splice(o,0,this.createHalfedge(d,f.site,null)),h++,E)break;g=v;case(this.equalWithEpsilon(g.y,n)&&this.lessThanWithEpsilon(g.x,r)):if(E=this.equalWithEpsilon(_.y,n),v=this.createVertex(E?_.x:r,n),d=this.createBorderEdge(f.site,g,v),o++,u.splice(o,0,this.createHalfedge(d,f.site,null)),h++,E)break;g=v;case(this.equalWithEpsilon(g.x,r)&&this.greaterThanWithEpsilon(g.y,l)):if(E=this.equalWithEpsilon(_.x,r),v=this.createVertex(r,E?_.y:l),d=this.createBorderEdge(f.site,g,v),o++,u.splice(o,0,this.createHalfedge(d,f.site,null)),h++,E)break;g=v;case(this.equalWithEpsilon(g.y,l)&&this.greaterThanWithEpsilon(g.x,t)):if(E=this.equalWithEpsilon(_.y,l),v=this.createVertex(E?_.x:t,l),d=this.createBorderEdge(f.site,g,v),o++,u.splice(o,0,this.createHalfedge(d,f.site,null)),h++,E||(g=v,E=this.equalWithEpsilon(_.x,t),v=this.createVertex(t,E?_.y:n),d=this.createBorderEdge(f.site,g,v),o++,u.splice(o,0,this.createHalfedge(d,f.site,null)),h++,E)||(g=v,E=this.equalWithEpsilon(_.y,n),v=this.createVertex(E?_.x:r,n),d=this.createBorderEdge(f.site,g,v),o++,u.splice(o,0,this.createHalfedge(d,f.site,null)),h++,E)||(g=v,E=this.equalWithEpsilon(_.x,r),v=this.createVertex(r,E?_.y:l),d=this.createBorderEdge(f.site,g,v),o++,u.splice(o,0,this.createHalfedge(d,f.site,null)),h++,E))break;default:throw"Voronoi.closeCells() > this makes no sense!"}o++}f.closeMe=!1}},i}(),Jt=$e.Voronoi=zt;const Nt=i=>{const e=new Jt;let t=0,r=0,l=0,n=0;for(let s=0;s<i.length;s++){let f=i[s];f.x<t&&(t=f.x),f.x>r&&(r=f.x),f.y<l&&(l=f.y),f.y>n&&(n=f.y)}let c={xl:t,xr:r,yt:l,yb:n};return e.compute(i,c)};function it(i){if(!i||i.length===0)return"";let e=[];const t=i.shift();let r=t.getStartpoint(),l=t.getEndpoint();e.push(`M ${r.x} ${r.y}`),e.push(`L ${l.x} ${l.y}`);for(let n of i){let c=n.getEndpoint();e.push(`L ${c.x} ${c.y}`)}return e.push("Z"),e.join(" ")}function jt(i,e,t,r){let l=[],n=0;for(let o=e;o>=0;o--){const u=i-o*i/e,h=r/180*Math.PI*u;n+=h}const c=n/t;let s=0,f=0;for(let o=e;o>=0;o--){const u=i-o*i/e,h=r/180*Math.PI*u;let d=Math.ceil(h/c);s+d>t&&(d=t-s);const g=h/d,v=(r-180)/180*Math.PI/2;for(let _=0;_<d;_++){s++;const E=_*g/u+g/u/2,k=-u*Math.cos(E-v),B=-u*Math.sin(E-v);l.push({id:o,x:k,y:B,a:f,angle:E})}f++}return l.sort((o,u)=>o.angle-u.angle),l}function rt(i,e,t){const r=i.slice();return r[33]=e[t],r[35]=t,r}function lt(i,e,t){const r=i.slice();return r[36]=e[t],r[35]=t,r}function nt(i,e,t){const r=i.slice();return r[36]=e[t],r}function st(i,e,t){const r=i.slice();return r[40]=e[t],r[35]=t,r}function at(i){let e,t;return{c(){e=V("path"),a(e,"d",t=`M ${i[1]-i[35]*(i[1]/i[2])},0 A ${i[1]-i[35]*(i[1]/i[2])},${i[1]-i[35]*(i[1]/i[2])} 0 0,0 ${-(i[1]-i[35]*(i[1]/i[2]))},0`),a(e,"fill","transparent"),a(e,"stroke","white"),a(e,"stroke-width","1"),a(e,"opacity","0.4")},m(r,l){O(r,e,l)},p(r,l){l[0]&6&&t!==(t=`M ${r[1]-r[35]*(r[1]/r[2])},0 A ${r[1]-r[35]*(r[1]/r[2])},${r[1]-r[35]*(r[1]/r[2])} 0 0,0 ${-(r[1]-r[35]*(r[1]/r[2]))},0`)&&a(e,"d",t)},d(r){r&&N(e)}}}function It(i){let e,t,r,l,n,c;return{c(){var s,f,o,u,h;e=V("circle"),a(e,"data-party",t=(s=i[36].data)==null?void 0:s.id),a(e,"cx",r=i[36].x),a(e,"cy",l=i[36].y),a(e,"r",i[3]),a(e,"fill",n=(f=i[36].data)==null?void 0:f.color),a(e,"opacity",c=(o=i[0])!=null&&o.id?((u=i[36].data)==null?void 0:u.id)===((h=i[0])==null?void 0:h.id)?1:.5:1)},m(s,f){O(s,e,f)},p(s,f){var o,u,h,d,g;f[0]&512&&t!==(t=(o=s[36].data)==null?void 0:o.id)&&a(e,"data-party",t),f[0]&512&&r!==(r=s[36].x)&&a(e,"cx",r),f[0]&512&&l!==(l=s[36].y)&&a(e,"cy",l),f[0]&8&&a(e,"r",s[3]),f[0]&512&&n!==(n=(u=s[36].data)==null?void 0:u.color)&&a(e,"fill",n),f[0]&513&&c!==(c=(h=s[0])!=null&&h.id?((d=s[36].data)==null?void 0:d.id)===((g=s[0])==null?void 0:g.id)?1:.5:1)&&a(e,"opacity",c)},d(s){s&&N(e)}}}function Ot(i){let e,t,r,l,n;return{c(){var c,s,f,o,u;e=V("path"),a(e,"d",Zt),a(e,"transform",t=`translate(${i[36].x},${i[36].y}) rotate(-5) scale(0.07)`),a(e,"data-party",r=(c=i[36].data)==null?void 0:c.id),a(e,"fill",l=(s=i[36].data)==null?void 0:s.color),a(e,"opacity",n=(f=i[0])!=null&&f.id?((o=i[36].data)==null?void 0:o.id)===((u=i[0])==null?void 0:u.id)?1:.5:1)},m(c,s){O(c,e,s)},p(c,s){var f,o,u,h,d;s[0]&512&&t!==(t=`translate(${c[36].x},${c[36].y}) rotate(-5) scale(0.07)`)&&a(e,"transform",t),s[0]&512&&r!==(r=(f=c[36].data)==null?void 0:f.id)&&a(e,"data-party",r),s[0]&512&&l!==(l=(o=c[36].data)==null?void 0:o.color)&&a(e,"fill",l),s[0]&513&&n!==(n=(u=c[0])!=null&&u.id?((h=c[36].data)==null?void 0:h.id)===((d=c[0])==null?void 0:d.id)?1:.5:1)&&a(e,"opacity",n)},d(c){c&&N(e)}}}function ft(i){let e;function t(n,c){return n[7]==="hexagon"?Ot:It}let r=t(i),l=r(i);return{c(){l.c(),e=Pe()},m(n,c){l.m(n,c),O(n,e,c)},p(n,c){r===(r=t(n))&&l?l.p(n,c):(l.d(1),l=r(n),l&&(l.c(),l.m(e.parentNode,e)))},d(n){n&&N(e),l.d(n)}}}function ot(i){let e,t=`${i[35]}`,r,l,n;return{c(){e=V("text"),r=G(t),a(e,"x",l=i[36].x),a(e,"y",n=i[36].y),a(e,"text-anchor","middle"),a(e,"alignment-baseline","middle"),a(e,"fill","white"),a(e,"font-size","8")},m(c,s){O(c,e,s),M(e,r)},p(c,s){s[0]&512&&l!==(l=c[36].x)&&a(e,"x",l),s[0]&512&&n!==(n=c[36].y)&&a(e,"y",n)},d(c){c&&N(e)}}}function ht(i){let e,t,r,l,n,c;function s(){return i[24](i[33])}function f(){return i[25](i[33])}function o(){return i[28](i[33])}function u(...h){return i[29](i[33],...h)}return{c(){e=V("path"),a(e,"class","voronoi_path"),a(e,"d",t=it(i[33].halfedges).toString()),a(e,"fill","transparent"),a(e,"stroke",r=i[8].includes("voronoi")?"white":"transparent"),a(e,"stroke-width",l=i[8].includes("voronoi")?1:0),a(e,"role","button"),a(e,"tabindex",i[35])},m(h,d){O(h,e,d),n||(c=[ne(e,"mouseover",s),ne(e,"focus",f),ne(e,"mouseout",i[26]),ne(e,"blur",i[27]),ne(e,"click",o),ne(e,"keypress",u)],n=!0)},p(h,d){i=h,d[0]&4096&&t!==(t=it(i[33].halfedges).toString())&&a(e,"d",t),d[0]&256&&r!==(r=i[8].includes("voronoi")?"white":"transparent")&&a(e,"stroke",r),d[0]&256&&l!==(l=i[8].includes("voronoi")?1:0)&&a(e,"stroke-width",l)},d(h){h&&N(e),n=!1,le(c)}}}function ct(i){var r;let e,t=((r=i[33].halfedges)==null?void 0:r.length)>0&&ht(i);return{c(){t&&t.c(),e=Pe()},m(l,n){t&&t.m(l,n),O(l,e,n)},p(l,n){var c;((c=l[33].halfedges)==null?void 0:c.length)>0?t?t.p(l,n):(t=ht(l),t.c(),t.m(e.parentNode,e)):t&&(t.d(1),t=null)},d(l){l&&N(e),t&&t.d(l)}}}function ut(i){let e,t=`${i[0].text}`,r;return{c(){e=V("text"),r=G(t),a(e,"x",0),a(e,"y",0),a(e,"text-anchor","middle"),a(e,"alignment-baseline","middle"),a(e,"fill",i[4]),a(e,"font-size",i[5])},m(l,n){O(l,e,n),M(e,r)},p(l,n){n[0]&1&&t!==(t=`${l[0].text}`)&&_e(r,t),n[0]&16&&a(e,"fill",l[4]),n[0]&32&&a(e,"font-size",l[5])},d(l){l&&N(e)}}}function Dt(i){let e,t,r,l,n,c,s,f,o,u,h,d,g,v,_,E,k,B,x,S=`${i[1]}, 0`,C,W,X,F,oe=`${i[1]}, ${-i[1]}`,te,Y,$,Z,he,ie,z,ce=`-${i[1]}, ${-i[1]}`,Ee,m,J,A,Me,Ve,be,Q,Ce=`-${i[1]}, 0`,je,Se,re,Ae,qe,ue=K(Array(i[2])),q=[];for(let p=0;p<ue.length;p+=1)q[p]=at(st(i,ue,p));let de=K(i[9]),P=[];for(let p=0;p<de.length;p+=1)P[p]=ft(nt(i,de,p));let pe=K(i[9]),R=[];for(let p=0;p<pe.length;p+=1)R[p]=ot(lt(i,pe,p));let ge=K(i[12].cells),T=[];for(let p=0;p<ge.length;p+=1)T[p]=ct(rt(i,ge,p));let L=i[0]&&ut(i);return{c(){var p,b;e=_t("main"),t=V("svg"),r=V("g");for(let w=0;w<q.length;w+=1)q[w].c();n=V("g");for(let w=0;w<P.length;w+=1)P[w].c();s=V("g");for(let w=0;w<R.length;w+=1)R[w].c();o=V("g");for(let w=0;w<T.length;w+=1)T[w].c();h=V("g"),L&&L.c(),g=V("g"),v=V("g"),_=V("text"),E=G("0, 0"),k=V("circle"),B=V("g"),x=V("text"),C=G(S),W=V("circle"),X=V("g"),F=V("text"),te=G(oe),Z=V("circle"),ie=V("g"),z=V("text"),Ee=G(ce),A=V("circle"),be=V("g"),Q=V("text"),je=G(Ce),re=V("circle"),a(r,"id","arcs"),a(r,"transform",l=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),a(r,"class","svelte-smqp4o"),D(r,"hide",!i[8].includes("arcs")),a(n,"id","points"),a(n,"transform",c=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),a(n,"class","svelte-smqp4o"),D(n,"hide",!i[8].includes("points")),a(s,"id","numbers"),a(s,"transform",f=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),a(s,"class","svelte-smqp4o"),D(s,"hide",!i[8].includes("numbers")),a(o,"id","voronoi"),a(o,"transform",u=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),a(h,"id","text"),a(h,"transform",d=`translate(${((p=i[6])==null?void 0:p.x)||i[1]+i[11]}, ${((b=i[6])==null?void 0:b.y)||i[1]+i[10]+20})`),a(h,"class","svelte-smqp4o"),D(h,"hide",!i[8].includes("text")),a(_,"x","0"),a(_,"y","10"),a(_,"text-anchor","middle"),a(_,"alignment-baseline","middle"),a(_,"fill","white"),a(_,"font-size","8"),a(k,"cx","0"),a(k,"cy","0"),a(k,"r","2"),a(k,"fill","white"),a(v,"class","reference_points"),a(x,"x",i[1]),a(x,"y","10"),a(x,"text-anchor","middle"),a(x,"alignment-baseline","middle"),a(x,"fill","white"),a(x,"font-size","8"),a(W,"cx",i[1]),a(W,"cy",0),a(W,"r","2"),a(W,"fill","white"),a(B,"class","reference_points"),a(F,"x",Y=i[1]-10),a(F,"y",$=-i[1]+10),a(F,"text-anchor","middle"),a(F,"alignment-baseline","middle"),a(F,"fill","white"),a(F,"font-size","8"),a(Z,"cx",i[1]),a(Z,"cy",he=-i[1]),a(Z,"r","2"),a(Z,"fill","white"),a(X,"class","reference_points"),a(z,"x",m=-i[1]+10),a(z,"y",J=-i[1]+10),a(z,"text-anchor","middle"),a(z,"alignment-baseline","middle"),a(z,"fill","white"),a(z,"font-size","8"),a(A,"cx",Me=-i[1]),a(A,"cy",Ve=-i[1]),a(A,"r","2"),a(A,"fill","white"),a(ie,"class","reference_points"),a(Q,"x",Se=-i[1]),a(Q,"y",10),a(Q,"text-anchor","middle"),a(Q,"alignment-baseline","middle"),a(Q,"fill","white"),a(Q,"font-size","8"),a(re,"cx",Ae=-i[1]),a(re,"cy",0),a(re,"r","2"),a(re,"fill","white"),a(be,"class","reference_points"),a(g,"id","referencePoints"),a(g,"transform",qe=`translate(${i[1]+i[11]}, ${i[1]+i[10]})`),a(g,"class","svelte-smqp4o"),D(g,"hide",!i[8].includes("referencePoints")),a(t,"width",i[13]),a(t,"height",i[14])},m(p,b){O(p,e,b),M(e,t),M(t,r);for(let w=0;w<q.length;w+=1)q[w]&&q[w].m(r,null);M(t,n);for(let w=0;w<P.length;w+=1)P[w]&&P[w].m(n,null);M(t,s);for(let w=0;w<R.length;w+=1)R[w]&&R[w].m(s,null);M(t,o);for(let w=0;w<T.length;w+=1)T[w]&&T[w].m(o,null);M(t,h),L&&L.m(h,null),M(t,g),M(g,v),M(v,_),M(_,E),M(v,k),M(g,B),M(B,x),M(x,C),M(B,W),M(g,X),M(X,F),M(F,te),M(X,Z),M(g,ie),M(ie,z),M(z,Ee),M(ie,A),M(g,be),M(be,Q),M(Q,je),M(be,re)},p(p,b){var w,pt;if(b[0]&6){ue=K(Array(p[2]));let y;for(y=0;y<ue.length;y+=1){const j=st(p,ue,y);q[y]?q[y].p(j,b):(q[y]=at(j),q[y].c(),q[y].m(r,null))}for(;y<q.length;y+=1)q[y].d(1);q.length=ue.length}if(b[0]&3074&&l!==(l=`translate(${p[1]+p[11]}, ${p[1]+p[10]})`)&&a(r,"transform",l),b[0]&256&&D(r,"hide",!p[8].includes("arcs")),b[0]&649){de=K(p[9]);let y;for(y=0;y<de.length;y+=1){const j=nt(p,de,y);P[y]?P[y].p(j,b):(P[y]=ft(j),P[y].c(),P[y].m(n,null))}for(;y<P.length;y+=1)P[y].d(1);P.length=de.length}if(b[0]&3074&&c!==(c=`translate(${p[1]+p[11]}, ${p[1]+p[10]})`)&&a(n,"transform",c),b[0]&256&&D(n,"hide",!p[8].includes("points")),b[0]&512){pe=K(p[9]);let y;for(y=0;y<pe.length;y+=1){const j=lt(p,pe,y);R[y]?R[y].p(j,b):(R[y]=ot(j),R[y].c(),R[y].m(s,null))}for(;y<R.length;y+=1)R[y].d(1);R.length=pe.length}if(b[0]&3074&&f!==(f=`translate(${p[1]+p[11]}, ${p[1]+p[10]})`)&&a(s,"transform",f),b[0]&256&&D(s,"hide",!p[8].includes("numbers")),b[0]&233728){ge=K(p[12].cells);let y;for(y=0;y<ge.length;y+=1){const j=rt(p,ge,y);T[y]?T[y].p(j,b):(T[y]=ct(j),T[y].c(),T[y].m(o,null))}for(;y<T.length;y+=1)T[y].d(1);T.length=ge.length}b[0]&3074&&u!==(u=`translate(${p[1]+p[11]}, ${p[1]+p[10]})`)&&a(o,"transform",u),p[0]?L?L.p(p,b):(L=ut(p),L.c(),L.m(h,null)):L&&(L.d(1),L=null),b[0]&3138&&d!==(d=`translate(${((w=p[6])==null?void 0:w.x)||p[1]+p[11]}, ${((pt=p[6])==null?void 0:pt.y)||p[1]+p[10]+20})`)&&a(h,"transform",d),b[0]&256&&D(h,"hide",!p[8].includes("text")),b[0]&2&&S!==(S=`${p[1]}, 0`)&&_e(C,S),b[0]&2&&a(x,"x",p[1]),b[0]&2&&a(W,"cx",p[1]),b[0]&2&&oe!==(oe=`${p[1]}, ${-p[1]}`)&&_e(te,oe),b[0]&2&&Y!==(Y=p[1]-10)&&a(F,"x",Y),b[0]&2&&$!==($=-p[1]+10)&&a(F,"y",$),b[0]&2&&a(Z,"cx",p[1]),b[0]&2&&he!==(he=-p[1])&&a(Z,"cy",he),b[0]&2&&ce!==(ce=`-${p[1]}, ${-p[1]}`)&&_e(Ee,ce),b[0]&2&&m!==(m=-p[1]+10)&&a(z,"x",m),b[0]&2&&J!==(J=-p[1]+10)&&a(z,"y",J),b[0]&2&&Me!==(Me=-p[1])&&a(A,"cx",Me),b[0]&2&&Ve!==(Ve=-p[1])&&a(A,"cy",Ve),b[0]&2&&Ce!==(Ce=`-${p[1]}, 0`)&&_e(je,Ce),b[0]&2&&Se!==(Se=-p[1])&&a(Q,"x",Se),b[0]&2&&Ae!==(Ae=-p[1])&&a(re,"cx",Ae),b[0]&3074&&qe!==(qe=`translate(${p[1]+p[11]}, ${p[1]+p[10]})`)&&a(g,"transform",qe),b[0]&256&&D(g,"hide",!p[8].includes("referencePoints")),b[0]&8192&&a(t,"width",p[13]),b[0]&16384&&a(t,"height",p[14])},i:H,o:H,d(p){p&&N(e),we(q,p),we(P,p),we(R,p),we(T,p),L&&L.d()}}}let Zt="M86.60254037844386 12L173.20508075688772 50L173.20508075688772 150L86.60254037844386 200L0 150L0 50Z";function Qt(i,e,t){let{data:r=[]}=e,{r:l=300}=e,{rows:n=12}=e,{dotsize:c=5}=e,{padding:s=10}=e,{total_seats:f}=e,{color:o="white"}=e,{font_size:u=12}=e,{arc:h=180}=e,{text_position:d=null}=e,{selectedShape:g="circle"}=e,{display:v=["points","text"]}=e,{current_party:_=null}=e,E=[],k=null,B=!1,x=0,S=0,C=0,W=0,X=0,F=0;function oe(){Array.isArray(s)?s.length===2?(t(10,x=s[0]),t(22,S=s[0]),t(11,C=s[1]),t(23,W=s[1])):s.length===4&&(t(10,x=s[0]),t(22,S=s[1]),t(11,C=s[2]),t(23,W=s[3])):(t(10,x=s),t(22,S=s),t(11,C=s),t(23,W=s))}function te(m){m.data&&!B&&t(0,_=m.data)}function Y(m){m.data&&(_&&B&&_.id===m.data.id?(t(0,_=null),B=!1):(t(0,_=m.data),B=!0))}function $(){B||t(0,_=null)}const Z=m=>{te(m.site)},he=m=>te(m.site),ie=()=>$(),z=()=>$(),ce=m=>{Y(m.site)},Ee=(m,J)=>{J.key==="Enter"&&Y(m.site)};return i.$$set=m=>{"data"in m&&t(19,r=m.data),"r"in m&&t(1,l=m.r),"rows"in m&&t(2,n=m.rows),"dotsize"in m&&t(3,c=m.dotsize),"padding"in m&&t(20,s=m.padding),"total_seats"in m&&t(21,f=m.total_seats),"color"in m&&t(4,o=m.color),"font_size"in m&&t(5,u=m.font_size),"arc"in m&&t(18,h=m.arc),"text_position"in m&&t(6,d=m.text_position),"selectedShape"in m&&t(7,g=m.selectedShape),"display"in m&&t(8,v=m.display),"current_party"in m&&t(0,_=m.current_party)},i.$$.update=()=>{if(i.$$.dirty[0]&15470086){h<10&&t(18,h=10),h>360&&t(18,h=360),oe(),r.sort((J,A)=>A.count-J.count),r.reduce((J,A)=>J+A.count,0),t(9,E=jt(l,n,f,h));let m=0;for(let J in r)for(let A=0;A<r[J].count;A++)t(9,E[m].data=r[J],E),m++;t(12,k=Nt(E)),t(13,X=l*2+C+W),t(14,F=l*2+x+S)}},[_,l,n,c,o,u,d,g,v,E,x,C,k,X,F,te,Y,$,h,r,s,f,S,W,Z,he,ie,z,ce,Ee]}class Ut extends Ye{constructor(e){super(),Xe(this,e,Qt,Dt,De,{data:19,r:1,rows:2,dotsize:3,padding:20,total_seats:21,color:4,font_size:5,arc:18,text_position:6,selectedShape:7,display:8,current_party:0},null,[-1,-1])}}function dt(i){let e,t;return e=new Ut({props:{data:i[1],total_seats:Kt,rows:Xt}}),{c(){Mt(e.$$.fragment)},m(r,l){Ge(e,r,l),t=!0},p(r,l){const n={};l&2&&(n.data=r[1]),e.$set(n)},i(r){t||(me(e.$$.fragment,r),t=!0)},o(r){Fe(e.$$.fragment,r),t=!1},d(r){Ke(e,r)}}}function Gt(i){let e,t,r=i[0]==="hemicycle"&&dt(i);return{c(){r&&r.c(),e=Pe()},m(l,n){r&&r.m(l,n),O(l,e,n),t=!0},p(l,[n]){l[0]==="hemicycle"?r?(r.p(l,n),n&1&&me(r,1)):(r=dt(l),r.c(),me(r,1),r.m(e.parentNode,e)):r&&(xt(),Fe(r,1,1,()=>{r=null}),Bt())},i(l){t||(me(r),t=!0)},o(l){Fe(r),t=!1},d(l){l&&N(e),r&&r.d(l)}}}const Kt=400,Xt=12;function Yt(i,e,t){let{visualisation:r="hemicycle"}=e,l=[];const n=["#FF0000","#0000FF","#008000","#FFA500","#FFFF00","#800080","#FFC0CB","#00FFFF","#FF00FF","#000000","#808080","#800000","#008080","#800080","#000080","#808000","#008000"];return mt(async()=>{const s=await(await fetch("https://iec-api.revengine.dailymaverick.co.za/results/seats/national/2019")).json();t(1,l=s.partyResults.map((f,o)=>({id:o,text:f.Abbreviation,count:f.Seats,color:n[o]})))}),i.$$set=c=>{"visualisation"in c&&t(0,r=c.visualisation)},[r,l]}class $t extends Ye{constructor(e){super(),Xe(this,e,Yt,Gt,De,{visualisation:0})}}console.log("App"),jQuery(()=>{const i=document.querySelectorAll(".wp-block-tenlayer-election-engine");console.log({targets:i}),i.forEach(e=>{let t={id:e.id,visualisation:e.dataset.visualisation,selected_year:e.dataset.selected_year,selected_election:e.dataset.selected_election,selected_region:e.dataset.selected_region,selected_fields:e.dataset.selected_fields};new $t({target:e,props:t})})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
